// LACUNA LAZY LOAD FALLBACK
function lacuna_lazy_load(id, callback){
    fetch("http://127.0.0.1:8125/lazyload/", {
        method: "POST",
        headers: { "Accept": "application/json", "Content-Type": "application/json" },
        body: JSON.stringify({id})
    }).then(response => {
        return response.text();
    }).then(callback);
}
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define(factory);
	else if(typeof exports === 'object')
		exports["wx"] = factory();
	else
		root["wx"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	// WebRx's API-Surface
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var App_1 = __webpack_require__(3);
	exports.app = App_1.app;
	exports.router = App_1.router;
	exports.messageBus = App_1.messageBus;
	var Module_1 = __webpack_require__(14);
	exports.module = Module_1.module;
	__export(__webpack_require__(5));
	var Property_1 = __webpack_require__(13);
	exports.property = Property_1.property;
	var DomManager_1 = __webpack_require__(16);
	exports.applyBindings = DomManager_1.applyBindings;
	exports.cleanNode = DomManager_1.cleanNode;
	var Command_1 = __webpack_require__(20);
	exports.command = Command_1.command;
	exports.asyncCommand = Command_1.asyncCommand;
	exports.combinedCommand = Command_1.combinedCommand;
	exports.isCommand = Command_1.isCommand;
	var Animation_1 = __webpack_require__(50);
	exports.animation = Animation_1.animation;
	var Oid_1 = __webpack_require__(2);
	exports.getOid = Oid_1.getOid;
	var List_1 = __webpack_require__(28);
	exports.list = List_1.list;
	exports.isList = List_1.isList;
	var Map_1 = __webpack_require__(8);
	exports.createMap = Map_1.createMap;
	var Set_1 = __webpack_require__(1);
	exports.createSet = Set_1.createSet;
	exports.setToArray = Set_1.setToArray;
	var WeakMap_1 = __webpack_require__(7);
	exports.createWeakMap = WeakMap_1.createWeakMap;
	var Lazy_1 = __webpack_require__(29);
	exports.Lazy = Lazy_1.default;
	var VirtualChildNodes_1 = __webpack_require__(26);
	exports.VirtualChildNodes = VirtualChildNodes_1.default;
	var RouteMatcher_1 = __webpack_require__(46);
	exports.route = RouteMatcher_1.route;
	var Value_1 = __webpack_require__(32);
	exports.getNodeValue = Value_1.getNodeValue;
	exports.setNodeValue = Value_1.setNodeValue;
	var Injector_1 = __webpack_require__(4);
	exports.injector = Injector_1.injector;
	var IID_1 = __webpack_require__(10);
	exports.IID = IID_1.default;
	// re-exports
	var res = __webpack_require__(11);
	exports.res = res;
	var env = __webpack_require__(17);
	exports.env = env;
	//# sourceMappingURL=WebRx.js.map

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../node_modules/typescript/bin/lib.es6.d.ts" />
	/// <reference path="../Interfaces.ts" />
	var Oid_1 = __webpack_require__(2);
	"use strict";
	/**
	* ES6 Set Shim
	* @class
	*/
	var SetEmulated = (function () {
	    function SetEmulated() {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[4238:4356]", functionData => eval(functionData))}
	    ////////////////////
	    /// ISet
	    SetEmulated.prototype.add = function (value) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[4447:4634]", functionData => eval(functionData))};
	    SetEmulated.prototype.delete = function (value) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[4689:4960]", functionData => eval(functionData))};
	    SetEmulated.prototype.has = function (value) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[5012:5107]", functionData => eval(functionData))};
	    SetEmulated.prototype.clear = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[5156:5222]", functionData => eval(functionData))};
	    SetEmulated.prototype.forEach = function (callback, thisArg) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[5290:5347]", functionData => eval(functionData))};
	    Object.defineProperty(SetEmulated.prototype, "size", {
	        get: function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[5435:5487]", functionData => eval(functionData))},
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SetEmulated.prototype, "isEmulated", {
	        get: function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[5645:5683]", functionData => eval(functionData))},
	        enumerable: true,
	        configurable: true
	    });
	    return SetEmulated;
	})();
	var hasNativeSupport = typeof Set === "function" && Set.prototype.hasOwnProperty("forEach")
	    && Set.prototype.hasOwnProperty("add") && Set.prototype.hasOwnProperty("clear")
	    && Set.prototype.hasOwnProperty("delete") && Set.prototype.hasOwnProperty("has");
	/**
	* Creates a new Set instance
	* @param {boolean} disableNativeSupport Force creation of an emulated implementation, regardless of browser native support.
	* @return {ISet<T>} A new instance of a suitable ISet implementation
	*/
	function createSet(disableNativeSupport) {
	    if (disableNativeSupport || !hasNativeSupport) {
	        return new SetEmulated();
	    }
	    return new Set();
	}
	exports.createSet = createSet;
	/**
	* Extracts the values of a Set by invoking its forEach method and capturing the output
	*/
	function setToArray(src) {
	    var result = new Array();
	    src.forEach(function (x) { return result.push(x); });
	    return result;
	}
	exports.setToArray = setToArray;
	//# sourceMappingURL=Set.js.map

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var oid = 1;
	var oidPropertyName = "__wx_oid__" + (new Date).getTime();
	function isPrimitive(target) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[6976:7073]", functionData => eval(functionData))}
	/**
	* Returns the objects unique id or assigns it if unassigned
	* @param {any} o
	*/
	function getOid(o) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[7182:7719]", functionData => eval(functionData))}
	exports.getOid = getOid;
	//# sourceMappingURL=Oid.js.map

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="./Interfaces.ts" />
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var Injector_1 = __webpack_require__(4);
	var Utils_1 = __webpack_require__(5);
	var res = __webpack_require__(11);
	var log = __webpack_require__(12);
	var Property_1 = __webpack_require__(13);
	var Module_1 = __webpack_require__(14);
	var ExpressionCompiler = __webpack_require__(15);
	var DomManager_1 = __webpack_require__(16);
	var HtmlTemplateEngine_1 = __webpack_require__(18);
	var Command_1 = __webpack_require__(19);
	var Module_2 = __webpack_require__(21);
	var If_1 = __webpack_require__(22);
	var MultiOneWay_1 = __webpack_require__(23);
	var SimpleOneWay_1 = __webpack_require__(24);
	var ForEach_1 = __webpack_require__(25);
	var Event_1 = __webpack_require__(31);
	var Value_1 = __webpack_require__(32);
	var HasFocus_1 = __webpack_require__(33);
	var With_1 = __webpack_require__(34);
	var Checked_1 = __webpack_require__(35);
	var KeyPress_1 = __webpack_require__(36);
	var TextInput_1 = __webpack_require__(37);
	var SelectedValue_1 = __webpack_require__(38);
	var Component_1 = __webpack_require__(39);
	var StateActive_1 = __webpack_require__(40);
	var View_1 = __webpack_require__(41);
	var StateRef_1 = __webpack_require__(42);
	var Select_1 = __webpack_require__(43);
	var RadioGroup_1 = __webpack_require__(44);
	var Router_1 = __webpack_require__(45);
	var MessageBus_1 = __webpack_require__(47);
	var Version_1 = __webpack_require__(48);
	// make sure RxExtensions get installed
	var RxExtensions_1 = __webpack_require__(49);
	RxExtensions_1.install();
	"use strict";
	var App = (function (_super) {
	    __extends(App, _super);
	    function App() {
	        _super.call(this, "app");
	        /// <summary>
	        /// This Observer is signalled whenever an object that has a
	        /// ThrownExceptions property doesn't Subscribe to that Observable. Use
	        /// Observer.Create to set up what will happen - the default is to crash
	        /// the application with an error message.
	        /// </summary>
	        this.defaultExceptionHandler = Rx.Observer.create(function (ex) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[10148:10436]", functionData => eval(functionData))});
	        this.title = Property_1.property(document.title);
	        this.version = Version_1.version;
	        if (!Utils_1.isInUnitTest()) {
	            this.history = this.createHistory();
	        }
	        else {
	            this.history = window["createMockHistory"]();
	        }
	    }
	    Object.defineProperty(App.prototype, "mainThreadScheduler", {
	        /// <summary>
	        /// MainThreadScheduler is the scheduler used to schedule work items that
	        /// should be run "on the UI thread". In normal mode, this will be
	        /// DispatcherScheduler, and in Unit Test mode this will be Immediate,
	        /// to simplify writing common unit tests.
	        /// </summary>
	        get: function () {
	            return this._unitTestMainThreadScheduler || this._mainThreadScheduler
	                || Rx.Scheduler.currentThread; // OW: return a default if schedulers haven't been setup by in
	        },
	        set: function (value) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[11405:11703]", functionData => eval(functionData))},
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(App.prototype, "templateEngine", {
	        get: function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[11857:12053]", functionData => eval(functionData))},
	        set: function (newVal) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[12087:12143]", functionData => eval(functionData))},
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(App.prototype, "router", {
	        get: function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[12289:12453]", functionData => eval(functionData))},
	        enumerable: true,
	        configurable: true
	    });
	    App.prototype.createHistory = function () {
	        // inherit default implementation
	        var result = {
	            back: window.history.back.bind(window.history),
	            forward: window.history.forward.bind(window.history),
	            //go: window.history.go,
	            pushState: window.history.pushState.bind(window.history),
	            replaceState: window.history.replaceState.bind(window.history),
	            getSearchParameters: function (query) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[13000:13506]", functionData => eval(functionData))}
	        };
	        Object.defineProperty(result, "length", {
	            get: function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[13600:13663]", functionData => eval(functionData))},
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(result, "state", {
	            get: function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[13821:13883]", functionData => eval(functionData))},
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(result, "location", {
	            get: function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[14044:14101]", functionData => eval(functionData))},
	            enumerable: true,
	            configurable: true
	        });
	        // enrich with observable
	        result.onPopState = Rx.Observable.fromEventPattern(function (h) { return window.addEventListener("popstate", h); }, function (h) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[14352:14405]", functionData => eval(functionData))})
	            .publish()
	            .refCount();
	        return result;
	    };
	    App.prototype.register = function () {
	        Injector_1.injector.register(res.app, this) // register with injector
	            .register(res.expressionCompiler, ExpressionCompiler)
	            .register(res.templateEngine, [HtmlTemplateEngine_1.default], true)
	            .register(res.domManager, [res.expressionCompiler, res.app, DomManager_1.DomManager], true)
	            .register(res.router, [res.domManager, res.app, Router_1.Router], true)
	            .register(res.messageBus, [MessageBus_1.default], true);
	        Injector_1.injector.register("bindings.module", [res.domManager, Module_2.default], true)
	            .register("bindings.command", [res.domManager, Command_1.default], true)
	            .register("bindings.if", [res.domManager, If_1.IfBinding], true)
	            .register("bindings.with", [res.domManager, With_1.default], true)
	            .register("bindings.notif", [res.domManager, If_1.NotIfBinding], true)
	            .register("bindings.css", [res.domManager, MultiOneWay_1.CssBinding], true)
	            .register("bindings.attr", [res.domManager, MultiOneWay_1.AttrBinding], true)
	            .register("bindings.style", [res.domManager, MultiOneWay_1.StyleBinding], true)
	            .register("bindings.text", [res.domManager, SimpleOneWay_1.TextBinding], true)
	            .register("bindings.html", [res.domManager, SimpleOneWay_1.HtmlBinding], true)
	            .register("bindings.visible", [res.domManager, SimpleOneWay_1.VisibleBinding], true)
	            .register("bindings.hidden", [res.domManager, SimpleOneWay_1.HiddenBinding], true)
	            .register("bindings.enabled", [res.domManager, SimpleOneWay_1.EnableBinding], true)
	            .register("bindings.disabled", [res.domManager, SimpleOneWay_1.DisableBinding], true)
	            .register("bindings.foreach", [res.domManager, ForEach_1.default], true)
	            .register("bindings.event", [res.domManager, Event_1.default], true)
	            .register("bindings.keyPress", [res.domManager, KeyPress_1.default], true)
	            .register("bindings.textInput", [res.domManager, TextInput_1.default], true)
	            .register("bindings.checked", [res.domManager, Checked_1.default], true)
	            .register("bindings.selectedValue", [res.domManager, SelectedValue_1.default], true)
	            .register("bindings.component", [res.domManager, Component_1.default], true)
	            .register("bindings.value", [res.domManager, Value_1.default], true)
	            .register("bindings.hasFocus", [res.domManager, HasFocus_1.default], true)
	            .register("bindings.view", [res.domManager, res.router, View_1.default], true)
	            .register("bindings.sref", [res.domManager, res.router, StateRef_1.default], true)
	            .register("bindings.sactive", [res.domManager, res.router, StateActive_1.default], true);
	        Injector_1.injector.register("components.radiogroup", [res.templateEngine, RadioGroup_1.default])
	            .register("components.select", [res.templateEngine, Select_1.default]);
	        // initialize module
	        this.binding("module", "bindings.module")
	            .binding("css", "bindings.css")
	            .binding("attr", "bindings.attr")
	            .binding("style", "bindings.style")
	            .binding("command", "bindings.command")
	            .binding("if", "bindings.if")
	            .binding("with", "bindings.with")
	            .binding("ifnot", "bindings.notif")
	            .binding("text", "bindings.text")
	            .binding("html", "bindings.html")
	            .binding("visible", "bindings.visible")
	            .binding("hidden", "bindings.hidden")
	            .binding("disabled", "bindings.disabled")
	            .binding("enabled", "bindings.enabled")
	            .binding("foreach", "bindings.foreach")
	            .binding("event", "bindings.event")
	            .binding(["keyPress", "keypress"], "bindings.keyPress")
	            .binding(["textInput", "textinput"], "bindings.textInput")
	            .binding("checked", "bindings.checked")
	            .binding("selectedValue", "bindings.selectedValue")
	            .binding("component", "bindings.component")
	            .binding("value", "bindings.value")
	            .binding(["hasFocus", "hasfocus"], "bindings.hasFocus")
	            .binding("view", "bindings.view")
	            .binding(["sref", "stateRef", "stateref"], "bindings.sref")
	            .binding(["sactive", "stateActive", "stateactive"], "bindings.sactive");
	        this.component("wx-radiogroup", { resolve: "components.radiogroup" })
	            .component("wx-select", { resolve: "components.select" });
	        // register with module-registry
	        Module_1.modules["app"] = { instance: this };
	    };
	    return App;
	})(Module_1.Module);
	var _app = new App();
	exports.app = _app;
	_app.register();
	exports.router = Injector_1.injector.get(res.router);
	exports.messageBus = Injector_1.injector.get(res.messageBus);
	//# sourceMappingURL=App.js.map

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	var res = __webpack_require__(11);
	"use strict";
	/**
	* Simple IoC & Service Locator
	*/
	var Injector = (function () {
	    function Injector() {
	        //////////////////////////////////
	        // Implementation
	        this.registrations = {};
	    }
	    Injector.prototype.register = function () {
	        var key = arguments[0];
	        var val = arguments[1];
	        var isSingleton = arguments[2];
	        var factory;
	        if (this.registrations.hasOwnProperty(key))
	            Utils_1.throwError("'{0}' is already registered", key);
	        if (Utils_1.isFunction(val)) {
	            // second overload
	            // it's a factory function
	            factory = function (args, deps) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[20412:20445]", functionData => eval(functionData))};
	        }
	        else if (Array.isArray(val)) {
	            // first overload
	            // array assumed to be inline array notation with constructor
	            var self_1 = this;
	            var ctor = val.pop();
	            var dependencies = val;
	            factory = function (args, deps) {
	                // resolve dependencies
	                var resolved = dependencies.map(function (x) {
	                    try {
	                        return self_1.get(x, undefined, deps);
	                    }
	                    catch (e) {
	                        Utils_1.throwError("Error resolving dependency '{0}' for '{1}': {2}", x, key, e);
	                    }
	                });
	                // invoke constructor
	                var _args = [null].concat(resolved).concat(args);
	                var ctorFunc = ctor.bind.apply(ctor, _args);
	                return new ctorFunc();
	            };
	        }
	        else {
	            // third overload
	            // singleton
	            factory = function (args, deps) { return val; };
	        }
	        this.registrations[key] = { factory: factory, isSingleton: isSingleton };
	        return this;
	    };
	    Injector.prototype.get = function (key, args, deps) {
	        deps = deps || {};
	        if (deps.hasOwnProperty(key))
	            Utils_1.throwError("Detected circular dependency a from '{0}' to '{1}'", Object.keys(deps).join(", "), key);
	        // registered?
	        var registration = this.registrations[key];
	        if (registration === undefined)
	            Utils_1.throwError("'{0}' is not registered", key);
	        // already instantiated?
	        if (registration.isSingleton && registration.value)
	            return registration.value;
	        // append current key
	        var newDeps = {};
	        newDeps[key] = true;
	        Utils_1.extend(deps, newDeps);
	        // create it
	        var result = registration.factory(args, newDeps);
	        // cache if singleton
	        if (registration.isSingleton)
	            registration.value = result;
	        return result;
	    };
	    Injector.prototype.resolve = function (iaa, args) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[22626:23390]", functionData => eval(functionData))};
	    return Injector;
	})();
	exports.injector = new Injector();
	exports.injector.register(res.injector, function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[23510:23536]", functionData => eval(functionData))});
	//# sourceMappingURL=Injector.js.map

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../Interfaces.ts" />
	var Reflect_1 = __webpack_require__(6);
	var Events_1 = __webpack_require__(9);
	var IID_1 = __webpack_require__(10);
	/*
	* Global helpers
	*/
	"use strict";
	var regexCssClassName = /\S+/g;
	var RxObsConstructor = Rx.Observable; // the cast is neccessary because the rx.js.d.ts declares Observable as an interface
	exports.noop = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[24039:24042]", functionData => eval(functionData))};
	/**
	* Returns true if a ECMAScript5 strict-mode is active
	*/
	function isStrictMode() {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[24133:24178]", functionData => eval(functionData))}
	exports.isStrictMode = isStrictMode;
	/**
	* Returns true if target is a javascript primitive
	*/
	function isPrimitive(target) {
	    var t = typeof target;
	    return t === "boolean" || t === "number" || t === "string";
	}
	exports.isPrimitive = isPrimitive;
	/**
	* Tests if the target supports the interface
	* @param {any} target
	* @param {string} iid
	*/
	function queryInterface(target, iid) {
	    if (target == null || isPrimitive(target))
	        return false;
	    if (typeof target === "object")
	        target = target.constructor;
	    var interfaces = Reflect_1.getMetadata(Reflect_1.implementsMetaDataKey, target);
	    return interfaces != null && interfaces[iid];
	}
	exports.queryInterface = queryInterface;
	/**
	* Returns all own properties of target implementing interface iid
	* @param {any} target
	* @param {string} iid
	*/
	function getOwnPropertiesImplementingInterface(target, iid) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[25094:25388]", functionData => eval(functionData))}
	exports.getOwnPropertiesImplementingInterface = getOwnPropertiesImplementingInterface;
	/**
	* Determines if target is an instance of a IObservableProperty
	* @param {any} target
	*/
	function isProperty(target) {
	    if (target == null)
	        return false;
	    return queryInterface(target, IID_1.default.IObservableProperty);
	}
	exports.isProperty = isProperty;
	/**
	* Determines if target is an instance of a Rx.Scheduler
	* @param {any} target
	*/
	function isRxScheduler(target) {
	    if (target == null)
	        return false;
	    return Rx.Scheduler.isScheduler(target);
	}
	exports.isRxScheduler = isRxScheduler;
	/**
	* Determines if target is an instance of a Rx.Observable
	* @param {any} target
	*/
	function isRxObservable(target) {
	    if (target == null)
	        return false;
	    return target instanceof RxObsConstructor;
	}
	exports.isRxObservable = isRxObservable;
	/**
	* If the prop is an observable property return its value
	* @param {any} prop
	*/
	function unwrapProperty(prop) {
	    if (isProperty(prop))
	        return prop();
	    return prop;
	}
	exports.unwrapProperty = unwrapProperty;
	/**
	* Returns true if a Unit-Testing environment is detected
	*/
	function isInUnitTest() {
	    // detect jasmine 1.x
	    if (window && window["jasmine"] && window["jasmine"].version_ !== undefined) {
	        return true;
	    }
	    // detect jasmine 2.x
	    if (window && window["getJasmineRequireObj"] && typeof window["getJasmineRequireObj"] === "function") {
	        return true;
	    }
	    return false;
	}
	exports.isInUnitTest = isInUnitTest;
	/**
	* Transforms the current method's arguments into an array
	*/
	function args2Array(args) {
	    var result = [];
	    for (var i = 0, len = args.length; i < len; i++) {
	        result.push(args[i]);
	    }
	    return result;
	}
	exports.args2Array = args2Array;
	/**
	* Formats a string using .net style format string
	* @param {string} fmt The format string
	* @param {any[]} ...args Format arguments
	*/
	function formatString(fmt) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[27422:27683]", functionData => eval(functionData))}
	exports.formatString = formatString;
	/**
	* Copies own properties from src to dst
	*/
	function extend(src, dst, inherited) {
	    var prop;
	    if (!inherited) {
	        var ownProps = Object.getOwnPropertyNames(src);
	        for (var i = 0; i < ownProps.length; i++) {
	            prop = ownProps[i];
	            dst[prop] = src[prop];
	        }
	    }
	    else {
	        for (prop in src) {
	            dst[prop] = src[prop];
	        }
	    }
	    return dst;
	}
	exports.extend = extend;
	var PropertyInfo = (function () {
	    function PropertyInfo(propertyName, property) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[28274:28360]", functionData => eval(functionData))}
	    return PropertyInfo;
	})();
	exports.PropertyInfo = PropertyInfo;
	/**
	* Toggles one ore more css classes on the specified DOM element
	* @param {Node} node The target element
	* @param {boolean} shouldHaveClass True if the classes should be added to the element, false if they should be removed
	* @param {string[} classNames The list of classes to process
	*/
	function toggleCssClass(node, shouldHaveClass) {
	    var classNames = [];
	    for (var _i = 2; _i < arguments.length; _i++) {
	        classNames[_i - 2] = arguments[_i];
	    }
	    if (classNames) {
	        var currentClassNames = node.className.match(regexCssClassName) || [];
	        var index;
	        var className;
	        if (shouldHaveClass) {
	            for (var i = 0; i < classNames.length; i++) {
	                className = classNames[i];
	                index = currentClassNames.indexOf(className);
	                if (index === -1)
	                    currentClassNames.push(className);
	            }
	        }
	        else {
	            for (var i = 0; i < classNames.length; i++) {
	                className = classNames[i];
	                index = currentClassNames.indexOf(className);
	                if (index !== -1)
	                    currentClassNames.splice(index, 1);
	            }
	        }
	        node.className = currentClassNames.join(" ");
	    }
	}
	exports.toggleCssClass = toggleCssClass;
	/**
	 * Trigger a reflow on the target element
	 * @param {HTMLElement} el
	 */
	function triggerReflow(el) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[29888:29925]", functionData => eval(functionData))}
	exports.triggerReflow = triggerReflow;
	/**
	 * Returns true if the specified element may be disabled
	 * @param {HTMLElement} el
	 */
	function elementCanBeDisabled(el) {
	    return el instanceof HTMLButtonElement ||
	        el instanceof HTMLAnchorElement ||
	        el instanceof HTMLInputElement ||
	        el instanceof HTMLFieldSetElement ||
	        el instanceof HTMLLinkElement ||
	        el instanceof HTMLOptGroupElement ||
	        el instanceof HTMLOptionElement ||
	        el instanceof HTMLSelectElement ||
	        el instanceof HTMLTextAreaElement;
	}
	exports.elementCanBeDisabled = elementCanBeDisabled;
	/**
	 * Returns true if object is a Function.
	 * @param obj
	 */
	function isFunction(obj) {
	    return typeof obj == 'function' || false;
	}
	exports.isFunction = isFunction;
	/**
	 * Returns true if object is a Disposable
	 * @param obj
	 */
	function isDisposable(obj) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[30831:30925]", functionData => eval(functionData))}
	exports.isDisposable = isDisposable;
	/**
	 * Performs an optimized deep comparison between the two objects, to determine if they should be considered equal.
	 * @param a Object to compare
	 * @param b Object to compare to
	 */
	function isEqual(a, b, aStack, bStack) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[31195:35440]", functionData => eval(functionData))}
	exports.isEqual = isEqual;
	/**
	* Returns an array of clones of the nodes in the source array
	*/
	function cloneNodeArray(nodes) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[35573:35760]", functionData => eval(functionData))}
	exports.cloneNodeArray = cloneNodeArray;
	/**
	 * Converts a NodeList into a javascript array
	 * @param {NodeList} nodes
	 */
	function nodeListToArray(nodes) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[35922:35973]", functionData => eval(functionData))}
	exports.nodeListToArray = nodeListToArray;
	/**
	 * Converts the node's children into a javascript array
	 * @param {Node} node
	 */
	function nodeChildrenToArray(node) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[36144:36194]", functionData => eval(functionData))}
	exports.nodeChildrenToArray = nodeChildrenToArray;
	/**
	* Wraps an action in try/finally block and disposes the resource after the action has completed even if it throws an exception
	* (mimics C# using statement)
	* @param {Rx.IDisposable} disp The resource to dispose after action completes
	* @param {() => void} action The action to wrap
	*/
	function using(disp, action) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[36573:36769]", functionData => eval(functionData))}
	exports.using = using;
	/**
	* Turns an AMD-Style require call into an observable
	* @param {string} Module The module to load
	* @return {Rx.Observable<any>} An observable that yields a value and completes as soon as the module has been loaded
	*/
	function observableRequire(module) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[37056:37672]", functionData => eval(functionData))}
	exports.observableRequire = observableRequire;
	/**
	* Returns an observable that notifes of any observable property changes on the target
	* @param {any} target The object to observe
	* @return {Rx.Observable<T>} An observable
	*/
	function observeObject(target, defaultExceptionHandler, onChanging) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[37975:39007]", functionData => eval(functionData))}
	exports.observeObject = observeObject;
	/**
	 * whenAny allows you to observe whenever the value of one or more properties
	 * on an object have changed, providing an initial value when the Observable is set up.
	 */
	function whenAny() {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[39246:39799]", functionData => eval(functionData))}
	exports.whenAny = whenAny;
	/**
	* FOR INTERNAL USE ONLY
	* Throw an error containing the specified description
	*/
	function throwError(fmt) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[39943:40145]", functionData => eval(functionData))}
	exports.throwError = throwError;
	//# sourceMappingURL=Utils.js.map

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../Interfaces.ts" />
	var WeakMap_1 = __webpack_require__(7);
	var Set_1 = __webpack_require__(1);
	var Map_1 = __webpack_require__(8);
	/*! *****************************************************************************
	Copyright (C) Microsoft. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	
	See the License for the specific language governing permissions and
	limitations under the License.
	***************************************************************************** */
	"use strict";
	// Load global or shim versions of Map, Set, and WeakMap
	var functionPrototype = Object.getPrototypeOf(Function);
	// [[Metadata]] internal slot
	var __Metadata__ = WeakMap_1.createWeakMap();
	/**
	  * Applies a set of decorators to a property of a target object.
	  * @param decorators An array of decorators.
	  * @param target The target object.
	  * @param targetKey (Optional) The property key to decorate.
	  * @param targetDescriptor (Optional) The property descriptor for the target key
	  * @remarks Decorators are applied in reverse order.
	  * @example
	  *
	  *     class C {
	  *         // property declarations are not part of ES6, though they are valid in TypeScript:
	  *         // static staticProperty;
	  *         // property;
	  *
	  *         constructor(p) { }
	  *         static staticMethod(p) { }
	  *         method(p) { }
	  *     }
	  *
	  *     // constructor
	  *     C = Reflect.decorate(decoratorsArray, C);
	  *
	  *     // property (on constructor)
	  *     Reflect.decorate(decoratorsArray, C, "staticProperty");
	  *
	  *     // property (on prototype)
	  *     Reflect.decorate(decoratorsArray, C.prototype, "property");
	  *
	  *     // method (on constructor)
	  *     Object.defineProperty(C, "staticMethod",
	  *         Reflect.decorate(decoratorsArray, C, "staticMethod",
	  *             Object.getOwnPropertyDescriptor(C, "staticMethod")));
	  *
	  *     // method (on prototype)
	  *     Object.defineProperty(C.prototype, "method",
	  *         Reflect.decorate(decoratorsArray, C.prototype, "method",
	  *             Object.getOwnPropertyDescriptor(C.prototype, "method")));
	  *
	  */
	function decorate(decorators, target, targetKey, targetDescriptor) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[42913:44066]", functionData => eval(functionData))}
	exports.decorate = decorate;
	/**
	  * A default metadata decorator factory that can be used on a class, class member, or parameter.
	  * @param metadataKey The key for the metadata entry.
	  * @param metadataValue The value for the metadata entry.
	  * @returns A decorator function.
	  * @remarks
	  * If `metadataKey` is already defined for the target and target key, the
	  * metadataValue for that key will be overwritten.
	  * @example
	  *
	  *     // constructor
	  *     @Reflect.metadata(key, value)
	  *     class C {
	  *     }
	  *
	  *     // property (on constructor, TypeScript only)
	  *     class C {
	  *         @Reflect.metadata(key, value)
	  *         static staticProperty;
	  *     }
	  *
	  *     // property (on prototype, TypeScript only)
	  *     class C {
	  *         @Reflect.metadata(key, value)
	  *         property;
	  *     }
	  *
	  *     // method (on constructor)
	  *     class C {
	  *         @Reflect.metadata(key, value)
	  *         static staticMethod() { }
	  *     }
	  *
	  *     // method (on prototype)
	  *     class C {
	  *         @Reflect.metadata(key, value)
	  *         method() { }
	  *     }
	  *
	  */
	function metadata(metadataKey, metadataValue) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[45280:45853]", functionData => eval(functionData))}
	exports.metadata = metadata;
	/**
	  * Define a unique metadata entry on the target.
	  * @param metadataKey A key used to store and retrieve metadata.
	  * @param metadataValue A value that contains attached metadata.
	  * @param target The target object on which to define metadata.
	  * @param targetKey (Optional) The property key for the target.
	  * @example
	  *
	  *     class C {
	  *         // property declarations are not part of ES6, though they are valid in TypeScript:
	  *         // static staticProperty;
	  *         // property;
	  *
	  *         constructor(p) { }
	  *         static staticMethod(p) { }
	  *         method(p) { }
	  *     }
	  *
	  *     // constructor
	  *     Reflect.defineMetadata("custom:annotation", options, C);
	  *
	  *     // property (on constructor)
	  *     Reflect.defineMetadata("custom:annotation", options, C, "staticProperty");
	  *
	  *     // property (on prototype)
	  *     Reflect.defineMetadata("custom:annotation", options, C.prototype, "property");
	  *
	  *     // method (on constructor)
	  *     Reflect.defineMetadata("custom:annotation", options, C, "staticMethod");
	  *
	  *     // method (on prototype)
	  *     Reflect.defineMetadata("custom:annotation", options, C.prototype, "method");
	  *
	  *     // decorator factory as metadata-producing annotation.
	  *     function MyAnnotation(options): Decorator {
	  *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
	  *     }
	  *
	  */
	function defineMetadata(metadataKey, metadataValue, target, targetKey) {
	    if (!IsObject(target)) {
	        throw new TypeError();
	    }
	    else if (!IsUndefined(targetKey)) {
	        targetKey = ToPropertyKey(targetKey);
	    }
	    return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	}
	exports.defineMetadata = defineMetadata;
	/**
	  * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
	  * @param metadataKey A key used to store and retrieve metadata.
	  * @param target The target object on which the metadata is defined.
	  * @param targetKey (Optional) The property key for the target.
	  * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
	  * @example
	  *
	  *     class C {
	  *         // property declarations are not part of ES6, though they are valid in TypeScript:
	  *         // static staticProperty;
	  *         // property;
	  *
	  *         constructor(p) { }
	  *         static staticMethod(p) { }
	  *         method(p) { }
	  *     }
	  *
	  *     // constructor
	  *     result = Reflect.hasMetadata("custom:annotation", C);
	  *
	  *     // property (on constructor)
	  *     result = Reflect.hasMetadata("custom:annotation", C, "staticProperty");
	  *
	  *     // property (on prototype)
	  *     result = Reflect.hasMetadata("custom:annotation", C.prototype, "property");
	  *
	  *     // method (on constructor)
	  *     result = Reflect.hasMetadata("custom:annotation", C, "staticMethod");
	  *
	  *     // method (on prototype)
	  *     result = Reflect.hasMetadata("custom:annotation", C.prototype, "method");
	  *
	  */
	function hasMetadata(metadataKey, target, targetKey) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[49144:49377]", functionData => eval(functionData))}
	exports.hasMetadata = hasMetadata;
	/**
	  * Gets a value indicating whether the target object has the provided metadata key defined.
	  * @param metadataKey A key used to store and retrieve metadata.
	  * @param target The target object on which the metadata is defined.
	  * @param targetKey (Optional) The property key for the target.
	  * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
	  * @example
	  *
	  *     class C {
	  *         // property declarations are not part of ES6, though they are valid in TypeScript:
	  *         // static staticProperty;
	  *         // property;
	  *
	  *         constructor(p) { }
	  *         static staticMethod(p) { }
	  *         method(p) { }
	  *     }
	  *
	  *     // constructor
	  *     result = Reflect.hasOwnMetadata("custom:annotation", C);
	  *
	  *     // property (on constructor)
	  *     result = Reflect.hasOwnMetadata("custom:annotation", C, "staticProperty");
	  *
	  *     // property (on prototype)
	  *     result = Reflect.hasOwnMetadata("custom:annotation", C.prototype, "property");
	  *
	  *     // method (on constructor)
	  *     result = Reflect.hasOwnMetadata("custom:annotation", C, "staticMethod");
	  *
	  *     // method (on prototype)
	  *     result = Reflect.hasOwnMetadata("custom:annotation", C.prototype, "method");
	  *
	  */
	function hasOwnMetadata(metadataKey, target, targetKey) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[50793:51029]", functionData => eval(functionData))}
	exports.hasOwnMetadata = hasOwnMetadata;
	/**
	  * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
	  * @param metadataKey A key used to store and retrieve metadata.
	  * @param target The target object on which the metadata is defined.
	  * @param targetKey (Optional) The property key for the target.
	  * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	  * @example
	  *
	  *     class C {
	  *         // property declarations are not part of ES6, though they are valid in TypeScript:
	  *         // static staticProperty;
	  *         // property;
	  *
	  *         constructor(p) { }
	  *         static staticMethod(p) { }
	  *         method(p) { }
	  *     }
	  *
	  *     // constructor
	  *     result = Reflect.getMetadata("custom:annotation", C);
	  *
	  *     // property (on constructor)
	  *     result = Reflect.getMetadata("custom:annotation", C, "staticProperty");
	  *
	  *     // property (on prototype)
	  *     result = Reflect.getMetadata("custom:annotation", C.prototype, "property");
	  *
	  *     // method (on constructor)
	  *     result = Reflect.getMetadata("custom:annotation", C, "staticMethod");
	  *
	  *     // method (on prototype)
	  *     result = Reflect.getMetadata("custom:annotation", C.prototype, "method");
	  *
	  */
	function getMetadata(metadataKey, target, targetKey) {
	    if (!IsObject(target)) {
	        throw new TypeError();
	    }
	    else if (!IsUndefined(targetKey)) {
	        targetKey = ToPropertyKey(targetKey);
	    }
	    return OrdinaryGetMetadata(metadataKey, target, targetKey);
	}
	exports.getMetadata = getMetadata;
	/**
	  * Gets the metadata value for the provided metadata key on the target object.
	  * @param metadataKey A key used to store and retrieve metadata.
	  * @param target The target object on which the metadata is defined.
	  * @param targetKey (Optional) The property key for the target.
	  * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	  * @example
	  *
	  *     class C {
	  *         // property declarations are not part of ES6, though they are valid in TypeScript:
	  *         // static staticProperty;
	  *         // property;
	  *
	  *         constructor(p) { }
	  *         static staticMethod(p) { }
	  *         method(p) { }
	  *     }
	  *
	  *     // constructor
	  *     result = Reflect.getOwnMetadata("custom:annotation", C);
	  *
	  *     // property (on constructor)
	  *     result = Reflect.getOwnMetadata("custom:annotation", C, "staticProperty");
	  *
	  *     // property (on prototype)
	  *     result = Reflect.getOwnMetadata("custom:annotation", C.prototype, "property");
	  *
	  *     // method (on constructor)
	  *     result = Reflect.getOwnMetadata("custom:annotation", C, "staticMethod");
	  *
	  *     // method (on prototype)
	  *     result = Reflect.getOwnMetadata("custom:annotation", C.prototype, "method");
	  *
	  */
	function getOwnMetadata(metadataKey, target, targetKey) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[54065:54301]", functionData => eval(functionData))}
	exports.getOwnMetadata = getOwnMetadata;
	/**
	  * Gets the metadata keys defined on the target object or its prototype chain.
	  * @param target The target object on which the metadata is defined.
	  * @param targetKey (Optional) The property key for the target.
	  * @returns An array of unique metadata keys.
	  * @example
	  *
	  *     class C {
	  *         // property declarations are not part of ES6, though they are valid in TypeScript:
	  *         // static staticProperty;
	  *         // property;
	  *
	  *         constructor(p) { }
	  *         static staticMethod(p) { }
	  *         method(p) { }
	  *     }
	  *
	  *     // constructor
	  *     result = Reflect.getMetadataKeys(C);
	  *
	  *     // property (on constructor)
	  *     result = Reflect.getMetadataKeys(C, "staticProperty");
	  *
	  *     // property (on prototype)
	  *     result = Reflect.getMetadataKeys(C.prototype, "property");
	  *
	  *     // method (on constructor)
	  *     result = Reflect.getMetadataKeys(C, "staticMethod");
	  *
	  *     // method (on prototype)
	  *     result = Reflect.getMetadataKeys(C.prototype, "method");
	  *
	  */
	function getMetadataKeys(target, targetKey) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[55484:55705]", functionData => eval(functionData))}
	exports.getMetadataKeys = getMetadataKeys;
	/**
	  * Gets the unique metadata keys defined on the target object.
	  * @param target The target object on which the metadata is defined.
	  * @param targetKey (Optional) The property key for the target.
	  * @returns An array of unique metadata keys.
	  * @example
	  *
	  *     class C {
	  *         // property declarations are not part of ES6, though they are valid in TypeScript:
	  *         // static staticProperty;
	  *         // property;
	  *
	  *         constructor(p) { }
	  *         static staticMethod(p) { }
	  *         method(p) { }
	  *     }
	  *
	  *     // constructor
	  *     result = Reflect.getOwnMetadataKeys(C);
	  *
	  *     // property (on constructor)
	  *     result = Reflect.getOwnMetadataKeys(C, "staticProperty");
	  *
	  *     // property (on prototype)
	  *     result = Reflect.getOwnMetadataKeys(C.prototype, "property");
	  *
	  *     // method (on constructor)
	  *     result = Reflect.getOwnMetadataKeys(C, "staticMethod");
	  *
	  *     // method (on prototype)
	  *     result = Reflect.getOwnMetadataKeys(C.prototype, "method");
	  *
	  */
	function getOwnMetadataKeys(target, targetKey) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[56892:57116]", functionData => eval(functionData))}
	exports.getOwnMetadataKeys = getOwnMetadataKeys;
	/**
	  * Deletes the metadata entry from the target object with the provided key.
	  * @param metadataKey A key used to store and retrieve metadata.
	  * @param target The target object on which the metadata is defined.
	  * @param targetKey (Optional) The property key for the target.
	  * @returns `true` if the metadata entry was found and deleted; otherwise, false.
	  * @example
	  *
	  *     class C {
	  *         // property declarations are not part of ES6, though they are valid in TypeScript:
	  *         // static staticProperty;
	  *         // property;
	  *
	  *         constructor(p) { }
	  *         static staticMethod(p) { }
	  *         method(p) { }
	  *     }
	  *
	  *     // constructor
	  *     result = Reflect.deleteMetadata("custom:annotation", C);
	  *
	  *     // property (on constructor)
	  *     result = Reflect.deleteMetadata("custom:annotation", C, "staticProperty");
	  *
	  *     // property (on prototype)
	  *     result = Reflect.deleteMetadata("custom:annotation", C.prototype, "property");
	  *
	  *     // method (on constructor)
	  *     result = Reflect.deleteMetadata("custom:annotation", C, "staticMethod");
	  *
	  *     // method (on prototype)
	  *     result = Reflect.deleteMetadata("custom:annotation", C.prototype, "method");
	  *
	  */
	function deleteMetadata(metadataKey, target, targetKey) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[58519:59286]", functionData => eval(functionData))}
	exports.deleteMetadata = deleteMetadata;
	function DecorateConstructor(decorators, target) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[59379:59735]", functionData => eval(functionData))}
	function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[59822:60206]", functionData => eval(functionData))}
	function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[60284:60432]", functionData => eval(functionData))}
	// https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#getorcreatemetadatamap--o-p-create-
	function GetOrCreateMetadataMap(target, targetKey, create) {
	    var targetMetadata = __Metadata__.get(target);
	    if (!targetMetadata) {
	        if (!create) {
	            return undefined;
	        }
	        targetMetadata = Map_1.createMap();
	        __Metadata__.set(target, targetMetadata);
	    }
	    var keyMetadata = targetMetadata.get(targetKey);
	    if (!keyMetadata) {
	        if (!create) {
	            return undefined;
	        }
	        keyMetadata = Map_1.createMap();
	        targetMetadata.set(targetKey, keyMetadata);
	    }
	    return keyMetadata;
	}
	// https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasmetadata--metadatakey-o-p-
	function OrdinaryHasMetadata(MetadataKey, O, P) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[61302:61567]", functionData => eval(functionData))}
	// https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-
	function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
	    var metadataMap = GetOrCreateMetadataMap(O, P, false);
	    if (metadataMap === undefined) {
	        return false;
	    }
	    return Boolean(metadataMap.has(MetadataKey));
	}
	// https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetmetadata--metadatakey-o-p-
	function OrdinaryGetMetadata(MetadataKey, O, P) {
	    var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	    if (hasOwn) {
	        return OrdinaryGetOwnMetadata(MetadataKey, O, P);
	    }
	    var parent = GetPrototypeOf(O);
	    if (parent !== null) {
	        return OrdinaryGetMetadata(MetadataKey, parent, P);
	    }
	    return undefined;
	}
	// https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetownmetadata--metadatakey-o-p-
	function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
	    var metadataMap = GetOrCreateMetadataMap(O, P, false);
	    if (metadataMap === undefined) {
	        return undefined;
	    }
	    return metadataMap.get(MetadataKey);
	}
	// https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-
	function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
	    var metadataMap = GetOrCreateMetadataMap(O, P, true);
	    metadataMap.set(MetadataKey, MetadataValue);
	}
	// https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarymetadatakeys--o-p-
	function OrdinaryMetadataKeys(O, P) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[63217:64069]", functionData => eval(functionData))}
	// https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryownmetadatakeys--o-p-
	function OrdinaryOwnMetadataKeys(target, targetKey) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[64233:64455]", functionData => eval(functionData))}
	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type
	function IsUndefined(x) {
	    return x === undefined;
	}
	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray
	function IsArray(x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[64709:64743]", functionData => eval(functionData))}
	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type
	function IsObject(x) {
	    return typeof x === "object" ? x !== null : typeof x === "function";
	}
	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor
	function IsConstructor(x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[65022:65063]", functionData => eval(functionData))}
	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type
	function IsSymbol(x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[65186:65225]", functionData => eval(functionData))}
	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey
	function ToPropertyKey(value) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[65333:65422]", functionData => eval(functionData))}
	function GetPrototypeOf(O) {
	    var proto = Object.getPrototypeOf(O);
	    if (typeof O !== "function" || O === functionPrototype) {
	        return proto;
	    }
	    // TypeScript doesn't set __proto__ in ES5, as it's non-standard. 
	    // Try to determine the superclass constructor. Compatible implementations
	    // must either set __proto__ on a subclass constructor to the superclass constructor,
	    // or ensure each class has a valid `constructor` property on its prototype that
	    // points back to the constructor.
	    // If this is not the same as Function.[[Prototype]], then this is definately inherited.
	    // This is the case when in ES6 or when using __proto__ in a compatible browser.
	    if (proto !== functionPrototype) {
	        return proto;
	    }
	    // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
	    var prototype = O.prototype;
	    var prototypeProto = Object.getPrototypeOf(prototype);
	    if (prototypeProto == null || prototypeProto === Object.prototype) {
	        return proto;
	    }
	    // if the constructor was not a function, then we cannot determine the heritage.
	    var constructor = prototypeProto.constructor;
	    if (typeof constructor !== "function") {
	        return proto;
	    }
	    // if we have some kind of self-reference, then we cannot determine the heritage.
	    if (constructor === O) {
	        return proto;
	    }
	    // we have a pretty good guess at the heritage.
	    return constructor;
	}
	exports.implementsMetaDataKey = "wx:interfaceImpl";
	/**
	* Interface decorator
	* @param {string} interfaceName Name of an interface
	*/
	function Implements(value) {
	    return function (target) {
	        var interfaces = getMetadata(exports.implementsMetaDataKey, target) || {};
	        if (typeof (value) === "string")
	            value = value.split(/\s+/).map(function (x) { return x.trim(); }).filter(function (x) { return x; });
	        for (var i = 0; i < value.length; i++)
	            interfaces[value[i]] = true;
	        defineMetadata(exports.implementsMetaDataKey, interfaces, target);
	    };
	}
	exports.Implements = Implements;
	//# sourceMappingURL=Reflect.js.map

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../node_modules/typescript/bin/lib.es6.d.ts" />
	/// <reference path="../Interfaces.ts" />
	var Oid_1 = __webpack_require__(2);
	"use strict";
	/**
	* This class emulates the semantics of a WeakMap.
	* Even though this implementation is indeed "weak", it has the drawback of
	* requiring manual housekeeping of entries otherwise they are kept forever.
	* @class
	*/
	var WeakMapEmulated = (function () {
	    function WeakMapEmulated() {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[68183:68275]", functionData => eval(functionData))}
	    ////////////////////
	    /// IWeakMap
	    WeakMapEmulated.prototype.set = function (key, value) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[68379:68459]", functionData => eval(functionData))};
	    WeakMapEmulated.prototype.get = function (key) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[68513:68592]", functionData => eval(functionData))};
	    WeakMapEmulated.prototype.has = function (key) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[68646:68740]", functionData => eval(functionData))};
	    WeakMapEmulated.prototype.delete = function (key) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[68797:68883]", functionData => eval(functionData))};
	    Object.defineProperty(WeakMapEmulated.prototype, "isEmulated", {
	        get: function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[68981:69019]", functionData => eval(functionData))},
	        enumerable: true,
	        configurable: true
	    });
	    return WeakMapEmulated;
	})();
	var hasNativeSupport = typeof WeakMap === "function";
	//let hasNativeSupport = false;
	/**
	* Creates a new WeakMap instance
	* @param {boolean} disableNativeSupport Force creation of an emulated implementation, regardless of browser native support.
	* @return {IWeakMap<TKey, T>} A new instance of a suitable IWeakMap implementation
	*/
	function createWeakMap(disableNativeSupport) {
	    if (disableNativeSupport || !hasNativeSupport) {
	        return new WeakMapEmulated();
	    }
	    return new WeakMap();
	}
	exports.createWeakMap = createWeakMap;
	//# sourceMappingURL=WeakMap.js.map

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../node_modules/typescript/bin/lib.es6.d.ts" />
	/// <reference path="../Interfaces.ts" />
	"use strict";
	/**
	* ES6 Map Shim
	* @class
	*/
	var MapEmulated = (function () {
	    function MapEmulated() {
	        ////////////////////
	        /// Implementation
	        this.cacheSentinel = {};
	        this.keys = [];
	        this.values = [];
	        this.cache = this.cacheSentinel;
	    }
	    Object.defineProperty(MapEmulated.prototype, "size", {
	        ////////////////////
	        /// IMap
	        get: function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[70347:70397]", functionData => eval(functionData))},
	        enumerable: true,
	        configurable: true
	    });
	    MapEmulated.prototype.has = function (key) {
	        if (key === this.cache) {
	            return true;
	        }
	        if (this.find(key) >= 0) {
	            this.cache = key;
	            return true;
	        }
	        return false;
	    };
	    MapEmulated.prototype.get = function (key) {
	        var index = this.find(key);
	        if (index >= 0) {
	            this.cache = key;
	            return this.values[index];
	        }
	        return undefined;
	    };
	    MapEmulated.prototype.set = function (key, value) {
	        this.delete(key);
	        this.keys.push(key);
	        this.values.push(value);
	        this.cache = key;
	        return this;
	    };
	    MapEmulated.prototype.delete = function (key) {
	        var index = this.find(key);
	        if (index >= 0) {
	            this.keys.splice(index, 1);
	            this.values.splice(index, 1);
	            this.cache = this.cacheSentinel;
	            return true;
	        }
	        return false;
	    };
	    MapEmulated.prototype.clear = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[71518:71632]", functionData => eval(functionData))};
	    MapEmulated.prototype.forEach = function (callback, thisArg) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[71700:71953]", functionData => eval(functionData))};
	    Object.defineProperty(MapEmulated.prototype, "isEmulated", {
	        get: function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[72047:72085]", functionData => eval(functionData))},
	        enumerable: true,
	        configurable: true
	    });
	    MapEmulated.prototype.find = function (key) {
	        var keys = this.keys;
	        var size = keys.length;
	        for (var i = 0; i < size; ++i) {
	            if (keys[i] === key) {
	                return i;
	            }
	        }
	        return -1;
	    };
	    return MapEmulated;
	})();
	var hasNativeSupport = typeof Map === "function" && Map.prototype.hasOwnProperty("forEach")
	    && Map.prototype.hasOwnProperty("add") && Map.prototype.hasOwnProperty("clear")
	    && Map.prototype.hasOwnProperty("devare") && Map.prototype.hasOwnProperty("has");
	/**
	* Creates a new WeakMap instance
	* @param {boolean} disableNativeSupport Force creation of an emulated implementation, regardless of browser native support.
	* @return {IWeakMap<TKey, T>} A new instance of a suitable IWeakMap implementation
	*/
	function createMap(disableNativeSupport) {
	    if (disableNativeSupport || !hasNativeSupport) {
	        return new MapEmulated();
	    }
	    return new Map();
	}
	exports.createMap = createMap;
	//# sourceMappingURL=Map.js.map

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../Interfaces.ts" />
	"use strict";
	var PropertyChangedEventArgs = (function () {
	    /// <summary>
	    /// Initializes a new instance of the <see cref="ObservablePropertyChangedEventArgs{TSender}"/> class.
	    /// </summary>
	    /// <param name="sender">The sender.</param>
	    /// <param name="propertyName">Name of the property.</param>
	    function PropertyChangedEventArgs(sender, propertyName) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[73708:73790]", functionData => eval(functionData))}
	    return PropertyChangedEventArgs;
	})();
	exports.PropertyChangedEventArgs = PropertyChangedEventArgs;
	//# sourceMappingURL=Events.js.map

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/// <summary>
	/// Interface registry to be used with IUnknown.queryInterface
	/// </summary>
	var IID = (function () {
	    function IID() {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[74165:74173]", functionData => eval(functionData))}
	    IID.IDisposable = "IDisposable";
	    IID.IObservableProperty = "IObservableProperty";
	    IID.IObservableList = "IObservableList";
	    IID.ICommand = "ICommand";
	    IID.IHandleObservableErrors = "IHandleObservableErrors";
	    return IID;
	})();
	exports.default = IID;
	//# sourceMappingURL=IID.js.map

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	exports.app = "app";
	exports.injector = "injector";
	exports.domManager = "domservice";
	exports.router = "router";
	exports.messageBus = "messageBus";
	exports.expressionCompiler = "expressioncompiler";
	exports.templateEngine = "templateEngine";
	exports.hasValueBindingValue = "has.bindings.value";
	exports.valueBindingValue = "bindings.value";
	//# sourceMappingURL=Resources.js.map

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var Utils_1 = __webpack_require__(5);
	"use strict";
	function log() {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[75112:75520]", functionData => eval(functionData))}
	function critical(fmt) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[75545:75809]", functionData => eval(functionData))}
	exports.critical = critical;
	function error(fmt) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[75861:76121]", functionData => eval(functionData))}
	exports.error = error;
	function info(fmt) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[76166:76423]", functionData => eval(functionData))}
	exports.info = info;
	//# sourceMappingURL=Log.js.map

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../Interfaces.ts" />
	var Reflect_1 = __webpack_require__(6);
	var IID_1 = __webpack_require__(10);
	// NOTE: The factory method approach is necessary because it is  
	// currently impossible to implement a Typescript interface 
	// with a function signature in a Typescript class.
	"use strict";
	/**
	* Creates an observable property with an optional default value
	* @param {T} initialValue?
	*/
	function property(initialValue) {
	    // initialize accessor function
	    var accessor = function (newVal) {
	        if (arguments.length > 0) {
	            // set
	            if (newVal !== accessor.value) {
	                accessor.changingSubject.onNext(newVal);
	                accessor.value = newVal;
	                accessor.changedSubject.onNext(newVal);
	            }
	        }
	        else {
	            // get
	            return accessor.value;
	        }
	    };
	    Reflect_1.Implements(IID_1.default.IObservableProperty)(accessor);
	    Reflect_1.Implements(IID_1.default.IDisposable)(accessor);
	    //////////////////////////////////
	    // IDisposable implementation
	    accessor.dispose = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[77711:77719]", functionData => eval(functionData))};
	    //////////////////////////////////
	    // IObservableProperty<T> implementation
	    if (initialValue !== undefined)
	        accessor.value = initialValue;
	    // setup observables
	    accessor.changedSubject = new Rx.Subject();
	    accessor.changed = accessor.changedSubject
	        .publish()
	        .refCount();
	    accessor.changingSubject = new Rx.Subject();
	    accessor.changing = accessor.changingSubject
	        .publish()
	        .refCount();
	    return accessor;
	}
	exports.property = property;
	//# sourceMappingURL=Property.js.map

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../Interfaces.ts" />
	var Injector_1 = __webpack_require__(4);
	var Utils_1 = __webpack_require__(5);
	var res = __webpack_require__(11);
	"use strict";
	var Module = (function () {
	    function Module(name) {
	        //////////////////////////////////
	        // Implementation
	        this.bindings = {};
	        this.components = {};
	        this.expressionFilters = {};
	        this.animations = {};
	        this.name = name;
	    }
	    //////////////////////////////////
	    // wx.IModule
	    Module.prototype.merge = function (other) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[78932:79245]", functionData => eval(functionData))};
	    Module.prototype.component = function (name, component) {
	        this.components[name] = component;
	        return this;
	    };
	    Module.prototype.hasComponent = function (name) {
	        return this.components[name] != null;
	    };
	    Module.prototype.loadComponent = function (name, params) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[79556:79647]", functionData => eval(functionData))};
	    Module.prototype.binding = function () {
	        var _this = this;
	        var args = Utils_1.args2Array(arguments);
	        var name = args.shift();
	        var handler;
	        // lookup?
	        if (args.length === 0) {
	            // if the handler has been registered as resource, resolve it now and update registry
	            handler = this.bindings[name];
	            if (typeof handler === "string") {
	                handler = Injector_1.injector.get(handler);
	                this.bindings[name] = handler;
	            }
	            return handler;
	        }
	        // registration
	        handler = args.shift();
	        if (Array.isArray(name)) {
	            name.forEach(function (x) { return _this.bindings[x] = handler; });
	        }
	        else {
	            this.bindings[name] = handler;
	        }
	        return this;
	    };
	    Module.prototype.filter = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[80568:81220]", functionData => eval(functionData))};
	    Module.prototype.filters = function () {
	        return this.expressionFilters;
	    };
	    Module.prototype.animation = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[81362:82030]", functionData => eval(functionData))};
	    Object.defineProperty(Module.prototype, "app", {
	        get: function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[82112:82178]", functionData => eval(functionData))},
	        enumerable: true,
	        configurable: true
	    });
	    Module.prototype.instantiateComponent = function (name) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[82305:83262]", functionData => eval(functionData))};
	    Module.prototype.initializeComponent = function (obs, params) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[83331:84715]", functionData => eval(functionData))};
	    Module.prototype.loadComponentTemplate = function (template, params) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[84791:87472]", functionData => eval(functionData))};
	    Module.prototype.loadComponentViewModel = function (vm, componentParams) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[87552:88669]", functionData => eval(functionData))};
	    return Module;
	})();
	exports.Module = Module;
	exports.modules = {};
	/**
	* Defines a module.
	* @param {string} name The module name
	* @return {wx.IModule} The module handle
	*/
	function module(name, descriptor) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[88894:88957]", functionData => eval(functionData))}
	exports.module = module;
	/**
	* Instantiate a new module instance and configure it using the user supplied configuration
	* @param {string} name The module name
	* @return {wx.IModule} The module handle
	*/
	function loadModule(name) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[89194:91026]", functionData => eval(functionData))}
	exports.loadModule = loadModule;
	//# sourceMappingURL=Module.js.map

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	"use strict";
	/**
	* Knockout's object-literal parser ported to Typescript
	*/
	// The following regular expressions will be used to split an object-literal string into tokens
	// These two match strings, either with double quotes or single quotes
	var stringDouble = '"(?:[^"\\\\]|\\\\.)*"';
	var stringSingle = "'(?:[^'\\\\]|\\\\.)*'";
	// Matches a regular expression (text enclosed by slashes), but will also match sets of divisions
	// as a regular expression (this is handled by the parsing loop below).
	var stringRegexp = '/(?:[^/\\\\]|\\\\.)*/\w*';
	// These characters have special meaning to the parser and must not appear in the middle of a
	// token, except as part of a string.
	var specials = ',"\'{}()/:[\\]';
	// Match text (at least two characters) that does not contain any of the above special characters,
	// although some of the special characters are allowed to start it (all but the colon and comma).
	// The text can contain spaces, but leading or trailing spaces are skipped.
	var everyThingElse = '[^\\s:,/][^' + specials + ']*[^\\s' + specials + ']';
	// Match any non-space character not matched already. This will match colons and commas, since they're
	// not matched by "everyThingElse", but will also match any other single character that wasn't already
	// matched (for example: in "a: 1, b: 2", each of the non-space characters will be matched by oneNotSpace).
	var oneNotSpace = '[^\\s]';
	// Create the actual regular expression by or-ing the above strings. The order is important.
	var bindingToken = RegExp(stringDouble + '|' + stringSingle + '|' + stringRegexp + '|' + everyThingElse + '|' + oneNotSpace, 'g');
	// Match end of previous token to determine whether a slash is a division or regex.
	var divisionLookBehind = /[\])"'A-Za-z0-9_$]+$/;
	var keywordRegexLookBehind = { 'in': 1, 'return': 1, 'typeof': 1 };
	// Simplified extend() for our use-case
	function extend(dst, obj) {
	    var key;
	    for (key in obj) {
	        if (obj.hasOwnProperty(key)) {
	            dst[key] = obj[key];
	        }
	    }
	    return dst;
	}
	/**
	* Split an object-literal string into tokens (borrowed from the KnockoutJS project)
	* @param {string} objectLiteralString A javascript-style object literal without leading and trailing curly brances
	* @return {Command<any>} A Command whose ExecuteAsync just returns the CommandParameter immediately. Which you should ignore!
	*/
	function parseObjectLiteral(objectLiteralString) {
	    // Trim leading and trailing spaces from the string
	    var str = objectLiteralString.trim();
	    // Trim braces '{' surrounding the whole object literal
	    if (str.charCodeAt(0) === 123)
	        str = str.slice(1, -1);
	    // Split into tokens
	    var result = new Array(), toks = str.match(bindingToken), key, values, depth = 0;
	    if (toks) {
	        // Append a comma so that we don't need a separate code block to deal with the last item
	        toks.push(',');
	        for (var i = 0, tok = void 0; tok = toks[i]; ++i) {
	            var c = tok.charCodeAt(0);
	            // A comma signals the end of a key/value pair if depth is zero
	            if (c === 44) {
	                if (depth <= 0) {
	                    if (key)
	                        result.push(values ? { key: key, value: values.join('') } : { 'unknown': key, value: undefined });
	                    key = values = depth = 0;
	                    continue;
	                }
	            }
	            else if (c === 58) {
	                if (!values)
	                    continue;
	            }
	            else if (c === 47 && i && tok.length > 1) {
	                // Look at the end of the previous token to determine if the slash is actually division
	                var match = toks[i - 1].match(divisionLookBehind);
	                if (match && !keywordRegexLookBehind[match[0]]) {
	                    // The slash is actually a division punctuator; re-parse the remainder of the string (not including the slash)
	                    str = str.substr(str.indexOf(tok) + 1);
	                    toks = str.match(bindingToken);
	                    toks.push(',');
	                    i = -1;
	                    // Continue with just the slash
	                    tok = '/';
	                }
	            }
	            else if (c === 40 || c === 123 || c === 91) {
	                ++depth;
	            }
	            else if (c === 41 || c === 125 || c === 93) {
	                --depth;
	            }
	            else if (!key && !values) {
	                key = (c === 34 || c === 39) /* '"', "'" */ ? tok.slice(1, -1) : tok;
	                continue;
	            }
	            if (values)
	                values.push(tok);
	            else
	                values = [tok];
	        }
	    }
	    return result;
	}
	exports.parseObjectLiteral = parseObjectLiteral;
	/**
	* Angular's expression compiler ported to Typescript
	*/
	var hookField = "___runtimeHooks";
	function isDefined(value) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[96247:96287]", functionData => eval(functionData))}
	//function valueFn(value) { return () => value; }
	function $parseMinErr(module, message, arg1, arg2, arg3, arg4, arg5) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[96409:96593]", functionData => eval(functionData))}
	function lowercase(string) { return typeof string === "string" ? string.toLowerCase() : string; }
	// Sandboxing Angular Expressions
	// ------------------------------
	// Angular expressions are generally considered safe because these expressions only have direct
	// access to $scope and locals. However, one can obtain the ability to execute arbitrary JS code by
	// obtaining a reference to native JS functions such as the Function constructor.
	//
	// As an example, consider the following Angular expression:
	//
	//   {}.toString.constructor(alert("evil JS code"))
	//
	// We want to prevent this type of access. For the sake of performance, during the lexing phase we
	// disallow any "dotted" access to any member named "constructor".
	//
	// For reflective calls (a[b]) we check that the value of the lookup is not the Function constructor
	// while evaluating the expression, which is a stronger but more expensive test. Since reflective
	// calls are expensive anyway, this is not such a big deal compared to static dereferencing.
	//
	// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
	// against the expression language, but not to prevent exploits that were enabled by exposing
	// sensitive JavaScript or browser apis on Scope. Exposing such objects on a Scope is never a good
	// practice and therefore we are not even trying to protect against interaction with an object
	// explicitly exposed in this way.
	//
	// A developer could foil the name check by aliasing the Function constructor under a different
	// name on the scope.
	//
	// In general, it is not possible to access a Window object from an angular expression unless a
	// window or some DOM object that has a reference to window is published onto a Scope.
	function ensureSafeMemberName(name, fullExpression) {
	    if (name === "constructor") {
	        throw $parseMinErr("isecfld", "Referencing \"constructor\" field in WebRx expressions is disallowed! Expression: {0}", fullExpression);
	    }
	    return name;
	}
	function ensureSafeObject(obj, fullExpression) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[98693:99491]", functionData => eval(functionData))}
	var OPERATORS = {
	    /* jshint bitwise : false */
	    'null': function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[99570:99586]", functionData => eval(functionData))},
	    'true': function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[99613:99629]", functionData => eval(functionData))},
	    'false': function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[99657:99674]", functionData => eval(functionData))},
	    undefined: Utils_1.noop,
	    '+': function (self, locals, a, b) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[99746:100002]", functionData => eval(functionData))},
	    '-': function (self, locals, a, b) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[100044:100177]", functionData => eval(functionData))},
	    '*': function (self, locals, a, b) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[100219:100264]", functionData => eval(functionData))},
	    '/': function (self, locals, a, b) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[100306:100351]", functionData => eval(functionData))},
	    '%': function (self, locals, a, b) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[100393:100438]", functionData => eval(functionData))},
	    '^': function (self, locals, a, b) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[100480:100525]", functionData => eval(functionData))},
	    '=': Utils_1.noop,
	    '===': function (self, locals, a, b) { return a(self, locals) === b(self, locals); },
	    '!==': function (self, locals, a, b) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[100684:100731]", functionData => eval(functionData))},
	    '==': function (self, locals, a, b) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[100774:100821]", functionData => eval(functionData))},
	    '!=': function (self, locals, a, b) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[100864:100911]", functionData => eval(functionData))},
	    '<': function (self, locals, a, b) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[100953:100998]", functionData => eval(functionData))},
	    '>': function (self, locals, a, b) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[101040:101085]", functionData => eval(functionData))},
	    '<=': function (self, locals, a, b) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[101128:101174]", functionData => eval(functionData))},
	    '>=': function (self, locals, a, b) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[101217:101263]", functionData => eval(functionData))},
	    '&&': function (self, locals, a, b) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[101306:101352]", functionData => eval(functionData))},
	    '||': function (self, locals, a, b) { return a(self, locals) || b(self, locals); },
	    '&': function (self, locals, a, b) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[101483:101528]", functionData => eval(functionData))},
	    //    '|':function(self, locals, a,b){return a|b;},
	    '|': function (self, locals, a, b) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[101627:101685]", functionData => eval(functionData))},
	    '!': function (self, locals, a) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[101724:101752]", functionData => eval(functionData))}
	};
	/* jshint bitwise: true */
	var ESCAPE = { "n": "\n", "f": "\f", "r": "\r", "t": "\t", "v": "\v", "'": "'", '"': "\"" };
	/**
	* @constructor
	*/
	var Lexer = (function () {
	    function Lexer(options) {
	        this.options = options;
	    }
	    Lexer.prototype.lex = function (text) {
	        this.text = text;
	        this.index = 0;
	        this.ch = undefined;
	        this.lastCh = ":"; // can start regexp
	        this.tokens = [];
	        var token;
	        var json = [];
	        while (this.index < this.text.length) {
	            this.ch = this.text.charAt(this.index);
	            if (this.is("\"'")) {
	                this.readString(this.ch);
	            }
	            else if (this.isNumber(this.ch) || this.is(".") && this.isNumber(this.peek())) {
	                this.readNumber();
	            }
	            else if (this.isIdent(this.ch)) {
	                this.readIdent();
	                // identifiers can only be if the preceding char was a { or ,
	                if (this.was("{,") && json[0] === "{" &&
	                    (token = this.tokens[this.tokens.length - 1])) {
	                    token.json = token.text.indexOf(".") === -1;
	                }
	            }
	            else if (this.is("(){}[].,;:?")) {
	                this.tokens.push({
	                    index: this.index,
	                    text: this.ch,
	                    json: (this.was(":[,") && this.is("{[")) || this.is("}]:,")
	                });
	                if (this.is("{["))
	                    json.unshift(this.ch);
	                if (this.is("}]"))
	                    json.shift();
	                this.index++;
	            }
	            else if (this.isWhitespace(this.ch)) {
	                this.index++;
	                continue;
	            }
	            else {
	                var ch2 = this.ch + this.peek();
	                var ch3 = ch2 + this.peek(2);
	                var fn = OPERATORS[this.ch];
	                var fn2 = OPERATORS[ch2];
	                var fn3 = OPERATORS[ch3];
	                if (fn3) {
	                    this.tokens.push({ index: this.index, text: ch3, fn: fn3 });
	                    this.index += 3;
	                }
	                else if (fn2) {
	                    this.tokens.push({ index: this.index, text: ch2, fn: fn2 });
	                    this.index += 2;
	                }
	                else if (fn) {
	                    this.tokens.push({
	                        index: this.index,
	                        text: this.ch,
	                        fn: fn,
	                        json: (this.was("[,:") && this.is(" + -"))
	                    });
	                    this.index += 1;
	                }
	                else {
	                    this.throwError("Unexpected next character ", this.index, this.index + 1);
	                }
	            }
	            this.lastCh = this.ch;
	        }
	        return this.tokens;
	    };
	    Lexer.prototype.is = function (chars) {
	        return chars.indexOf(this.ch) !== -1;
	    };
	    Lexer.prototype.was = function (chars) {
	        return chars.indexOf(this.lastCh) !== -1;
	    };
	    Lexer.prototype.peek = function (i) {
	        var num = i || 1;
	        return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
	    };
	    Lexer.prototype.isNumber = function (ch) {
	        return ("0" <= ch && ch <= "9");
	    };
	    Lexer.prototype.isWhitespace = function (ch) {
	        // IE treats non-breaking space as \u00A0
	        return (ch === " " || ch === "\r" || ch === "\t" ||
	            ch === "\n" || ch === "\v" || ch === "\u00A0");
	    };
	    Lexer.prototype.isIdent = function (ch) {
	        return ("a" <= ch && ch <= "z" ||
	            "A" <= ch && ch <= "Z" ||
	            "_" === ch || ch === "$" || ch === "@");
	    };
	    Lexer.prototype.isExpOperator = function (ch) {
	        return (ch === "-" || ch === "+" || this.isNumber(ch));
	    };
	    Lexer.prototype.throwError = function (error, start, end) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[105821:106143]", functionData => eval(functionData))};
	    Lexer.prototype.readNumber = function () {
	        var n = "";
	        var start = this.index;
	        while (this.index < this.text.length) {
	            var ch = lowercase(this.text.charAt(this.index));
	            if (ch === "." || this.isNumber(ch)) {
	                n += ch;
	            }
	            else {
	                var peekCh = this.peek();
	                if (ch === "e" && this.isExpOperator(peekCh)) {
	                    n += ch;
	                }
	                else if (this.isExpOperator(ch) &&
	                    peekCh && this.isNumber(peekCh) &&
	                    n.charAt(n.length - 1) === "e") {
	                    n += ch;
	                }
	                else if (this.isExpOperator(ch) &&
	                    (!peekCh || !this.isNumber(peekCh)) &&
	                    n.charAt(n.length - 1) === "e") {
	                    this.throwError("Invalid exponent");
	                }
	                else {
	                    break;
	                }
	            }
	            this.index++;
	        }
	        n = 1 * n;
	        this.tokens.push({
	            index: start,
	            text: n,
	            json: true,
	            fn: function () {
	                return n;
	            }
	        });
	    };
	    Lexer.prototype.readIdent = function () {
	        var parser = this;
	        var ident = "";
	        var start = this.index;
	        var lastDot, peekIndex, methodName, ch;
	        while (this.index < this.text.length) {
	            ch = this.text.charAt(this.index);
	            if (ch === "." || this.isIdent(ch) || this.isNumber(ch)) {
	                if (ch === ".")
	                    lastDot = this.index;
	                ident += ch;
	            }
	            else {
	                break;
	            }
	            this.index++;
	        }
	        //check if this is not a method invocation and if it is back out to last dot
	        if (lastDot) {
	            peekIndex = this.index;
	            while (peekIndex < this.text.length) {
	                ch = this.text.charAt(peekIndex);
	                if (ch === "(") {
	                    methodName = ident.substr(lastDot - start + 1);
	                    ident = ident.substr(0, lastDot - start);
	                    this.index = peekIndex;
	                    break;
	                }
	                if (this.isWhitespace(ch)) {
	                    peekIndex++;
	                }
	                else {
	                    break;
	                }
	            }
	        }
	        var token = {
	            index: start,
	            text: ident
	        };
	        // OPERATORS is our own object so we don't need to use special hasOwnPropertyFn
	        if (OPERATORS.hasOwnProperty(ident)) {
	            token.fn = OPERATORS[ident];
	            token.json = OPERATORS[ident];
	        }
	        else {
	            var getter = getterFn(ident, this.options, this.text);
	            token.fn = extend(function (self, locals) {
	                return (getter(self, locals));
	            }, {
	                assign: function (self, value, locals) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[109283:109396]", functionData => eval(functionData))}
	            });
	        }
	        this.tokens.push(token);
	        if (methodName) {
	            this.tokens.push({
	                index: lastDot,
	                text: ".",
	                json: false
	            });
	            this.tokens.push({
	                index: lastDot + 1,
	                text: methodName,
	                json: false
	            });
	        }
	    };
	    Lexer.prototype.readString = function (quote) {
	        var start = this.index;
	        this.index++;
	        var value = "";
	        var rawString = quote;
	        var escape = false;
	        while (this.index < this.text.length) {
	            var ch = this.text.charAt(this.index);
	            rawString += ch;
	            if (escape) {
	                if (ch === "u") {
	                    var hex = this.text.substring(this.index + 1, this.index + 5);
	                    if (!hex.match(/[\da-f]{4}/i))
	                        this.throwError("Invalid unicode escape [\\u" + hex + "]");
	                    this.index += 4;
	                    value += String.fromCharCode(parseInt(hex, 16));
	                }
	                else {
	                    var rep = ESCAPE[ch];
	                    if (rep) {
	                        value += rep;
	                    }
	                    else {
	                        value += ch;
	                    }
	                }
	                escape = false;
	            }
	            else if (ch === "\\") {
	                escape = true;
	            }
	            else if (ch === quote) {
	                this.index++;
	                this.tokens.push({
	                    index: start,
	                    text: rawString,
	                    string: value,
	                    json: true,
	                    fn: function () {
	                        return value;
	                    }
	                });
	                return;
	            }
	            else {
	                value += ch;
	            }
	            this.index++;
	        }
	        this.throwError("Unterminated quote", start);
	    };
	    return Lexer;
	})();
	/**
	* @constructor
	*/
	var Parser = (function () {
	    function Parser(lexer, options) {
	        this.lexer = lexer;
	        this.options = options || { filters: {} };
	    }
	    Parser.prototype.parse = function (text) {
	        this.text = text;
	        this.tokens = this.lexer.lex(text);
	        var value = this.statements();
	        if (this.tokens.length !== 0) {
	            this.throwError("is an unexpected token", this.tokens[0]);
	        }
	        value.literal = !!value.literal;
	        value.constant = !!value.constant;
	        return value;
	    };
	    Parser.prototype.primary = function () {
	        var primary;
	        if (this.expect("(")) {
	            primary = this.filterChain();
	            this.consume(")");
	        }
	        else if (this.expect("[")) {
	            primary = this.arrayDeclaration();
	        }
	        else if (this.expect("{")) {
	            primary = this.object();
	        }
	        else {
	            var token = this.expect();
	            primary = token.fn;
	            if (!primary) {
	                this.throwError("not a primary expression", token);
	            }
	            if (token.json) {
	                primary.constant = true;
	                primary.literal = true;
	            }
	        }
	        var next, context;
	        while ((next = this.expect("(", "[", "."))) {
	            if (next.text === "(") {
	                primary = this.functionCall(primary, context);
	                context = null;
	            }
	            else if (next.text === "[") {
	                context = primary;
	                primary = this.objectIndex(primary);
	            }
	            else if (next.text === ".") {
	                context = primary;
	                primary = this.fieldAccess(primary);
	            }
	            else {
	                this.throwError("IMPOSSIBLE");
	            }
	        }
	        return primary;
	    };
	    Parser.prototype.throwError = function (msg, token) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[113540:113764]", functionData => eval(functionData))};
	    Parser.prototype.peekToken = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[113812:113980]", functionData => eval(functionData))};
	    Parser.prototype.peek = function (e1, e2, e3, e4) {
	        if (this.tokens.length > 0) {
	            var token = this.tokens[0];
	            var t = token.text;
	            if (t === e1 || t === e2 || t === e3 || t === e4 ||
	                (!e1 && !e2 && !e3 && !e4)) {
	                return token;
	            }
	        }
	        return false;
	    };
	    Parser.prototype.expect = function (e1, e2, e3, e4) {
	        var token = this.peek(e1, e2, e3, e4);
	        if (token) {
	            this.tokens.shift();
	            return token;
	        }
	        return false;
	    };
	    Parser.prototype.consume = function (e1) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[114630:114766]", functionData => eval(functionData))};
	    Parser.prototype.unaryFn = function (fn, right) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[114821:114988]", functionData => eval(functionData))};
	    Parser.prototype.ternaryFn = function (left, middle, right) {
	        return extend(function (self, locals) {
	            return left(self, locals) ? middle(self, locals) : right(self, locals);
	        }, {
	            constant: left.constant && middle.constant && right.constant
	        });
	    };
	    Parser.prototype.binaryFn = function (left, fn, right) {
	        return extend(function (self, locals) {
	            return fn(self, locals, left, right);
	        }, {
	            constant: left.constant && right.constant
	        });
	    };
	    Parser.prototype.statements = function () {
	        var statements = [];
	        while (true) {
	            if (this.tokens.length > 0 && !this.peek("}", ")", ";", "]"))
	                statements.push(this.filterChain());
	            if (!this.expect(";")) {
	                // optimize for the common case where there is only one statement.
	                // TODO(size): maybe we should not support multiple statements?
	                return (statements.length === 1)
	                    ? statements[0] :
	                    function (self, locals) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[116121:116521]", functionData => eval(functionData))};
	            }
	        }
	    };
	    Parser.prototype.filterChain = function () {
	        var left = this.expression();
	        var token;
	        while (true) {
	            if ((token = this.expect("|"))) {
	                left = this.binaryFn(left, token.fn, this.filter());
	            }
	            else {
	                return left;
	            }
	        }
	    };
	    Parser.prototype.filter = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[116949:117671]", functionData => eval(functionData))};
	    Parser.prototype.expression = function () {
	        return this.assignment();
	    };
	    Parser.prototype.assignment = function () {
	        var left = this.ternary();
	        var right;
	        var token;
	        if ((token = this.expect("="))) {
	            if (!left.assign) {
	                this.throwError("implies assignment but [" +
	                    this.text.substring(0, token.index) + "] can not be assigned to", token);
	            }
	            right = this.ternary();
	            return function (scope, locals) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[118220:118310]", functionData => eval(functionData))};
	        }
	        return left;
	    };
	    Parser.prototype.ternary = function () {
	        var left = this.logicalOR();
	        var middle;
	        var token;
	        if ((token = this.expect("?"))) {
	            middle = this.ternary();
	            if ((token = this.expect(":"))) {
	                return this.ternaryFn(left, middle, this.ternary());
	            }
	            else {
	                this.throwError("expected :", token);
	            }
	        }
	        return left;
	    };
	    Parser.prototype.logicalOR = function () {
	        var left = this.logicalAND();
	        var token;
	        while (true) {
	            if ((token = this.expect("||"))) {
	                left = this.binaryFn(left, token.fn, this.logicalAND());
	            }
	            else {
	                return left;
	            }
	        }
	    };
	    Parser.prototype.logicalAND = function () {
	        var left = this.equality();
	        var token;
	        if ((token = this.expect("&&"))) {
	            left = this.binaryFn(left, token.fn, this.logicalAND());
	        }
	        return left;
	    };
	    Parser.prototype.equality = function () {
	        var left = this.relational();
	        var token;
	        if ((token = this.expect("==", "!=", "===", "!=="))) {
	            left = this.binaryFn(left, token.fn, this.equality());
	        }
	        return left;
	    };
	    Parser.prototype.relational = function () {
	        var left = this.additive();
	        var token;
	        if ((token = this.expect("<", ">", "<=", ">="))) {
	            left = this.binaryFn(left, token.fn, this.relational());
	        }
	        return left;
	    };
	    Parser.prototype.additive = function () {
	        var left = this.multiplicative();
	        var token;
	        while ((token = this.expect("+", "-"))) {
	            left = this.binaryFn(left, token.fn, this.multiplicative());
	        }
	        return left;
	    };
	    Parser.prototype.multiplicative = function () {
	        var left = this.unary();
	        var token;
	        while ((token = this.expect("*", "/", "%"))) {
	            left = this.binaryFn(left, token.fn, this.unary());
	        }
	        return left;
	    };
	    Parser.prototype.unary = function () {
	        var token;
	        if (this.expect("+")) {
	            return this.primary();
	        }
	        else if ((token = this.expect("-"))) {
	            return this.binaryFn(ZERO, token.fn, this.unary());
	        }
	        else if ((token = this.expect("!"))) {
	            return this.unaryFn(token.fn, this.unary());
	        }
	        else {
	            return this.primary();
	        }
	    };
	    Parser.prototype.fieldAccess = function (object) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[121046:121505]", functionData => eval(functionData))};
	    Parser.prototype.objectIndex = function (obj) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[121558:122652]", functionData => eval(functionData))};
	    Parser.prototype.functionCall = function (fn, contextGetter) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[122720:123833]", functionData => eval(functionData))};
	    // This is used with json array declaration
	    Parser.prototype.arrayDeclaration = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[123937:124826]", functionData => eval(functionData))};
	    Parser.prototype.object = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[124871:125940]", functionData => eval(functionData))};
	    return Parser;
	})();
	function ZERO() {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[125986:125999]", functionData => eval(functionData))}
	;
	//////////////////////////////////////////////////
	// Parser helper functions
	//////////////////////////////////////////////////
	function setter(obj, path, setValue, fullExp, options, locals) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[126199:127453]", functionData => eval(functionData))}
	var getterFnCache = {};
	/**
	* Implementation of the "Black Hole" variant from:
	* - http://jsperf.com/angularjs-parse-getter/4
	* - http://jsperf.com/path-evaluation-simplified/7
	*/
	function cspSafeGetterFn(key0, key1, key2, key3, key4, fullExp, options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[127714:129747]", functionData => eval(functionData))}
	function simpleGetterFn1(key0, fullExp) {
	    ensureSafeMemberName(key0, fullExp);
	    return function (scope, locals) {
	        scope = ((locals && locals.hasOwnProperty(key0)) ? locals : scope);
	        if (scope == null)
	            return undefined;
	        var hooks = getRuntimeHooks(locals);
	        if (hooks && hooks.readFieldHook)
	            return hooks.readFieldHook(scope, key0);
	        return scope[key0];
	    };
	}
	function simpleGetterFn2(key0, key1, fullExp) {
	    ensureSafeMemberName(key0, fullExp);
	    ensureSafeMemberName(key1, fullExp);
	    return function (scope, locals) {
	        var hooks = getRuntimeHooks(locals);
	        if (hooks && hooks.readFieldHook) {
	            scope = (locals && locals.hasOwnProperty(key0)) ? locals : scope;
	            if (scope == null)
	                return undefined;
	            scope = hooks.readFieldHook(scope, key0);
	            return scope == null ? undefined : hooks.readFieldHook(scope, key1);
	        }
	        scope = ((locals && locals.hasOwnProperty(key0)) ? locals : scope)[key0];
	        return scope == null ? undefined : scope[key1];
	    };
	}
	function getterFn(path, options, fullExp) {
	    // Check whether the cache has this getter already.
	    // We can use hasOwnProperty directly on the cache because we ensure,
	    // see below, that the cache never stores a path called 'hasOwnProperty'
	    if (getterFnCache.hasOwnProperty(path)) {
	        return getterFnCache[path];
	    }
	    var pathKeys = path.split("."), pathKeysLength = pathKeys.length, fn;
	    // When we have only 1 or 2 tokens, use optimized special case closures.
	    // http://jsperf.com/angularjs-parse-getter/6
	    if (pathKeysLength === 1) {
	        fn = simpleGetterFn1(pathKeys[0], fullExp);
	    }
	    else if (pathKeysLength === 2) {
	        fn = simpleGetterFn2(pathKeys[0], pathKeys[1], fullExp);
	    }
	    else {
	        if (pathKeysLength < 6) {
	            fn = cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4], fullExp, options);
	        }
	        else {
	            fn = function (scope, locals) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[131888:132556]", functionData => eval(functionData))};
	        }
	    } /* else {
	    let code = "var p;\n";
	    forEach(pathKeys, (key, index) => {
	        ensureSafeMemberName(key, fullExp);
	        code += "if(s == null) return undefined;\n" +
	            "s=" + (index
	                // we simply dereference 's' on any .dot notation
	                ? "s"
	                // but if we are first then we check locals first, and if so read it first
	                : "((k&&k.hasOwnProperty(\"" + key + "\"))?k:s)") + "[\"" + key + "\"]" + ";\n";
	    });
	    code += "return s;";
	
	    // jshint -W054
	    let evaledFnGetter = new Function("s", "k", "pw", code); // s=scope, k=locals, pw=promiseWarning
	    // jshint +W054 /
	    evaledFnGetter.toString = valueFn(code);
	    fn = <(scope: any, locals?: any, self?: any) => any> evaledFnGetter;
	} */
	    // Only cache the value if it's not going to mess up the cache object
	    // This is more performant that using Object.prototype.hasOwnProperty.call
	    if (path !== "hasOwnProperty") {
	        getterFnCache[path] = fn;
	    }
	    return fn;
	}
	function getRuntimeHooks(locals) {
	    return locals !== undefined ? locals[hookField] : undefined;
	}
	exports.getRuntimeHooks = getRuntimeHooks;
	function setRuntimeHooks(locals, hooks) {
	    locals[hookField] = hooks;
	}
	exports.setRuntimeHooks = setRuntimeHooks;
	/**
	 * Compiles src and returns a function that executes src on a target object.
	 * The compiled function is cached under compile.cache[src] to speed up further calls.
	 *
	 * @param {string} src
	 * @returns {function}
	 */
	function compileExpression(src, options, cache) {
	    if (typeof src !== "string") {
	        throw new TypeError("src must be a string, instead saw '" + typeof src + "'");
	    }
	    var lexer = new Lexer({});
	    var parser = new Parser(lexer, options);
	    if (!cache) {
	        return parser.parse(src);
	    }
	    var cached = cache[src];
	    if (!cached) {
	        cached = cache[src] = parser.parse(src);
	    }
	    return cached;
	}
	exports.compileExpression = compileExpression;
	//# sourceMappingURL=ExpressionCompiler.js.map

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../Interfaces.ts" />
	var WeakMap_1 = __webpack_require__(7);
	var Set_1 = __webpack_require__(1);
	var IID_1 = __webpack_require__(10);
	var Injector_1 = __webpack_require__(4);
	var Utils_1 = __webpack_require__(5);
	var res = __webpack_require__(11);
	var env = __webpack_require__(17);
	"use strict";
	var DomManager = (function () {
	    function DomManager(compiler, app) {
	        this.expressionCache = {};
	        this.dataContextExtensions = Set_1.createSet();
	        this.parserOptions = {
	            disallowFunctionCalls: true
	        };
	        this.nodeState = WeakMap_1.createWeakMap();
	        this.compiler = compiler;
	        this.app = app;
	    }
	    DomManager.prototype.applyBindings = function (model, rootNode) {
	        if (rootNode === undefined || rootNode.nodeType !== 1)
	            Utils_1.throwError("first parameter should be your model, second parameter should be a DOM node!");
	        if (this.isNodeBound(rootNode))
	            Utils_1.throwError("an element must not be bound multiple times!");
	        // create or update node state for root node
	        var state = this.getNodeState(rootNode);
	        if (state) {
	            state.model = model;
	        }
	        else {
	            state = this.createNodeState(model);
	            this.setNodeState(rootNode, state);
	        }
	        // calculate resulting data-context and apply bindings
	        var ctx = this.getDataContext(rootNode);
	        this.applyBindingsRecursive(ctx, rootNode);
	    };
	    DomManager.prototype.applyBindingsToDescendants = function (ctx, node) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[136364:136714]", functionData => eval(functionData))};
	    DomManager.prototype.cleanNode = function (rootNode) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[136774:136885]", functionData => eval(functionData))};
	    DomManager.prototype.cleanDescendants = function (node) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[136948:137284]", functionData => eval(functionData))};
	    DomManager.prototype.getObjectLiteralTokens = function (value) {
	        value = value.trim();
	        if (value !== '' && this.isObjectLiteralString(value)) {
	            return this.compiler.parseObjectLiteral(value);
	        }
	        return [];
	    };
	    DomManager.prototype.compileBindingOptions = function (value, module) {
	        value = value.trim();
	        if (value === '') {
	            return null;
	        }
	        if (this.isObjectLiteralString(value)) {
	            var result = {};
	            var tokens = this.compiler.parseObjectLiteral(value);
	            var token;
	            for (var i = 0; i < tokens.length; i++) {
	                token = tokens[i];
	                result[token.key] = this.compileBindingOptions(token.value, module);
	            }
	            return result;
	        }
	        else {
	            // build compiler options
	            var options = Utils_1.extend(this.parserOptions, {});
	            options.filters = {};
	            // enrich with app filters
	            Utils_1.extend(this.app.filters(), options.filters);
	            // enrich with module filters
	            if (module && module.name != "app") {
	                Utils_1.extend(module.filters(), options.filters);
	            }
	            return this.compiler.compileExpression(value, options, this.expressionCache);
	        }
	    };
	    DomManager.prototype.getModuleContext = function (node) {
	        var state;
	        // collect model hierarchy
	        while (node) {
	            state = this.getNodeState(node);
	            if (state != null) {
	                if (state.module != null) {
	                    return state.module;
	                }
	            }
	            node = node.parentNode;
	        }
	        // default to app
	        return this.app;
	    };
	    DomManager.prototype.registerDataContextExtension = function (extension) {
	        this.dataContextExtensions.add(extension);
	    };
	    DomManager.prototype.getDataContext = function (node) {
	        var models = [];
	        var state = this.getNodeState(node);
	        // collect model hierarchy
	        var _node = node;
	        while (_node) {
	            state = state != null ? state : this.getNodeState(_node);
	            if (state != null) {
	                if (state.model != null) {
	                    models.push(state.model);
	                }
	            }
	            state = null;
	            _node = _node.parentNode;
	        }
	        var ctx;
	        if (models.length > 0) {
	            ctx = {
	                $data: models[0],
	                $root: models[models.length - 1],
	                $parent: models.length > 1 ? models[1] : null,
	                $parents: models.slice(1)
	            };
	        }
	        else {
	            ctx = {
	                $data: null,
	                $root: null,
	                $parent: null,
	                $parents: []
	            };
	        }
	        // extensions
	        this.dataContextExtensions.forEach(function (ext) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[140361:140387]", functionData => eval(functionData))});
	        return ctx;
	    };
	    DomManager.prototype.createNodeState = function (model, module) {
	        return {
	            cleanup: new Rx.CompositeDisposable(),
	            model: model,
	            module: module,
	            isBound: false
	        };
	    };
	    DomManager.prototype.isNodeBound = function (node) {
	        var state = this.nodeState.get(node);
	        return state != null && !!state.isBound;
	    };
	    DomManager.prototype.setNodeState = function (node, state) {
	        this.nodeState.set(node, state);
	    };
	    DomManager.prototype.getNodeState = function (node) {
	        return this.nodeState.get(node);
	    };
	    DomManager.prototype.clearNodeState = function (node) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[141111:141660]", functionData => eval(functionData))};
	    DomManager.prototype.evaluateExpression = function (exp, ctx) {
	        var locals = this.createLocals(undefined, ctx);
	        var result = exp(ctx.$data, locals);
	        return result;
	    };
	    DomManager.prototype.expressionToObservable = function (exp, ctx, evalObs) {
	        var _this = this;
	        var captured = Set_1.createSet();
	        var locals;
	        var result;
	        // initial evaluation
	        try {
	            locals = this.createLocals(captured, ctx);
	            result = exp(ctx.$data, locals);
	            // diagnostics
	            if (evalObs)
	                evalObs.onNext(true);
	        }
	        catch (e) {
	            this.app.defaultExceptionHandler.onNext(e);
	            return Rx.Observable.return(undefined);
	        }
	        // Optimization: If the initial evaluation didn't touch any observables, treat it as constant expression
	        if (captured.size === 0) {
	            if (Utils_1.isRxObservable(result))
	                return result;
	            // wrap it
	            return Rx.Observable.return(result);
	        }
	        var obs = Rx.Observable.create(function (observer) {
	            var innerDisp = Rx.Observable.defer(function () {
	                // construct observable that represents the first change of any of the expression's dependencies
	                return Rx.Observable.merge(Set_1.setToArray(captured)).take(1);
	            })
	                .repeat()
	                .subscribe(function (trigger) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[143180:144051]", functionData => eval(functionData))});
	            return innerDisp;
	        });
	        // prefix with initial result
	        var startValue = Utils_1.isRxObservable(result) ?
	            result :
	            Rx.Observable.return(result);
	        return obs.startWith(startValue).concatAll();
	    };
	    DomManager.prototype.applyBindingsInternal = function (ctx, el, module) {
	        var result = false;
	        // get or create elment-state
	        var state = this.getNodeState(el);
	        // create and set if necessary
	        if (!state) {
	            state = this.createNodeState();
	            this.setNodeState(el, state);
	        }
	        else if (state.isBound) {
	            Utils_1.throwError("an element must not be bound multiple times!");
	        }
	        var _bindings;
	        var tagName = el.tagName.toLowerCase();
	        // check if tag represents a component
	        if (module.hasComponent(tagName) || this.app.hasComponent(tagName)) {
	            // when a component is referenced by element, we just apply a virtual 'component' binding
	            var params = el.getAttribute(DomManager.paramsAttributename);
	            var componentReference;
	            if (params)
	                componentReference = "{ name: '" + tagName + "', params: {" + el.getAttribute(DomManager.paramsAttributename) + "} }";
	            else
	                componentReference = "{ name: '" + tagName + "' }";
	            _bindings = [{ key: 'component', value: componentReference }];
	        }
	        else {
	            // get definitions from attribute
	            _bindings = this.getBindingDefinitions(el);
	        }
	        if (_bindings != null && _bindings.length > 0) {
	            // lookup handlers
	            var bindings = _bindings.map(function (x) {
	                var handler = module.binding(x.key);
	                if (!handler)
	                    Utils_1.throwError("binding '{0}' has not been registered.", x.key);
	                return { handler: handler, value: x.value };
	            });
	            // sort by priority
	            bindings.sort(function (a, b) { return (b.handler.priority || 0) - (a.handler.priority || 0); });
	            // check if there's binding-handler competition for descendants (which is illegal)
	            var hd = bindings.filter(function (x) { return x.handler.controlsDescendants; }).map(function (x) { return "'" + x.value + "'"; });
	            if (hd.length > 1) {
	                Utils_1.throwError("bindings {0} are competing for descendants of target element!", hd.join(", "));
	            }
	            result = hd.length > 0;
	            // apply all bindings
	            for (var i = 0; i < bindings.length; i++) {
	                var binding = bindings[i];
	                var handler = binding.handler;
	                handler.applyBinding(el, binding.value, ctx, state, module);
	            }
	        }
	        // mark bound
	        state.isBound = true;
	        return result;
	    };
	    DomManager.prototype.isObjectLiteralString = function (str) {
	        return str[0] === "{" && str[str.length - 1] === "}";
	    };
	    DomManager.prototype.getBindingDefinitions = function (node) {
	        var bindingText = null;
	        if (node.nodeType === 1) {
	            // attempt to get definition from attribute
	            var attr = node.getAttribute(DomManager.bindingAttributeName);
	            if (attr) {
	                bindingText = attr;
	            }
	        }
	        // transform textual binding-definition into a key-value store where 
	        // the key is the binding name and the value is its options
	        if (bindingText) {
	            bindingText = bindingText.trim();
	        }
	        if (bindingText)
	            return this.compiler.parseObjectLiteral(bindingText);
	        return null;
	    };
	    DomManager.prototype.applyBindingsRecursive = function (ctx, el, module) {
	        // "module" binding receiving first-class treatment here because it is considered part of the core
	        module = module || this.getModuleContext(el);
	        if (!this.applyBindingsInternal(ctx, el, module) && el.hasChildNodes()) {
	            // module binding might have updated state.module
	            var state = this.getNodeState(el);
	            if (state && state.module)
	                module = state.module;
	            // iterate over descendants
	            for (var i = 0; i < el.childNodes.length; i++) {
	                var child = el.childNodes[i];
	                // only elements
	                if (child.nodeType !== 1)
	                    continue;
	                this.applyBindingsRecursive(ctx, child, module);
	            }
	        }
	    };
	    DomManager.prototype.cleanNodeRecursive = function (node) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[148839:149291]", functionData => eval(functionData))};
	    DomManager.prototype.createLocals = function (captured, ctx) {
	        var locals = {};
	        var list;
	        var prop;
	        var result, target;
	        var hooks = {
	            readFieldHook: function (o, field) {
	                // handle "@propref" access-modifier
	                var noUnwrap = false;
	                if (field[0] === '@') {
	                    noUnwrap = true;
	                    field = field.substring(1);
	                }
	                result = o[field];
	                // intercept access to observable properties
	                if (!noUnwrap && Utils_1.isProperty(result)) {
	                    var prop_1 = result;
	                    // register observable
	                    if (captured)
	                        captured.add(prop_1.changed);
	                    // get the property's real value
	                    result = prop_1();
	                }
	                return result;
	            },
	            writeFieldHook: function (o, field, newValue) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[150325:151088]", functionData => eval(functionData))},
	            readIndexHook: function (o, index) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[151138:152154]", functionData => eval(functionData))},
	            writeIndexHook: function (o, index, newValue) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[152215:153855]", functionData => eval(functionData))}
	        };
	        // install property interceptor hooks
	        this.compiler.setRuntimeHooks(locals, hooks);
	        // injected context members into locals
	        var keys = Object.keys(ctx);
	        var length = keys.length;
	        for (var i = 0; i < length; i++) {
	            var key = keys[i];
	            locals[key] = ctx[key];
	        }
	        return locals;
	    };
	    //////////////////////////////////
	    // Implementation
	    DomManager.bindingAttributeName = "data-bind";
	    DomManager.paramsAttributename = "params";
	    return DomManager;
	})();
	exports.DomManager = DomManager;
	/**
	* Applies bindings to the specified node and all of its children using the specified data context.
	* @param {any} model The model to bind to
	* @param {Node} rootNode The node to be bound
	*/
	function applyBindings(model, node) {
	    Injector_1.injector.get(res.domManager).applyBindings(model, node || window.document.documentElement);
	}
	exports.applyBindings = applyBindings;
	/**
	* Removes and cleans up any binding-related state from the specified node and its descendants.
	* @param {Node} rootNode The node to be cleaned
	*/
	function cleanNode(node) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[155045:155111]", functionData => eval(functionData))}
	exports.cleanNode = cleanNode;
	//# sourceMappingURL=DomManager.js.map

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var WeakMap_1 = __webpack_require__(7);
	"use strict";
	var _window = window;
	var userAgent = _window.navigator.userAgent;
	var parseVersion = function (matches) {
	    if (matches) {
	        return parseFloat(matches[1]);
	    }
	    return undefined;
	};
	// Detect Opera
	if (_window.opera && _window.opera.version) {
	    exports.opera = { version: parseInt(_window.opera.version()) };
	}
	// Detect wx.IE versions for bug workarounds (uses wx.IE conditionals, not UA string, for robustness)
	// Note that, since wx.IE 10 does not support conditional comments, the following logic only detects wx.IE < 10.
	// Currently this is by design, since wx.IE 10+ behaves correctly when treated as a standard browser.
	var version = document && (function () {
	    var version = 3, div = document.createElement('div'), iElems = div.getElementsByTagName('i');
	    // Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment
	    while (div.innerHTML = '<!--[if gt wx.IE ' + (++version) + ']><i></i><![endif]-->',
	        iElems[0]) { }
	    return version > 4 ? version : undefined;
	}());
	if (version) {
	    exports.ie = { version: version };
	    if (version < 10) {
	        // for wx.IE9 and lower, provide an accessor for document scoped
	        // observables which allow monitoring the selectionchange event
	        var map = WeakMap_1.createWeakMap();
	        exports.ie.getSelectionChangeObservable = function (el) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[156724:157195]", functionData => eval(functionData))};
	    }
	}
	// Detect Safari (not Chrome or WebKit)
	version = parseVersion(userAgent.match(/^(?:(?!chrome).)*version\/([^ ]*) safari/i));
	if (version) {
	    exports.safari = { version: version };
	}
	// Detect FF
	version = parseVersion(userAgent.match(/Firefox\/([^ ]*)/));
	if (version) {
	    exports.firefox = { version: version };
	}
	var hasES5 = typeof Array.isArray === "function" &&
	    typeof [].forEach === "function" &&
	    typeof [].map === "function" &&
	    typeof [].some === "function" &&
	    typeof [].indexOf === "function" &&
	    typeof Object.keys === "function" &&
	    typeof Object.defineProperty === "function";
	exports.isSupported = (!exports.ie || exports.ie.version >= 9) ||
	    (!exports.safari || exports.safari.version >= 5) ||
	    (!exports.firefox || exports.firefox.version >= 5) &&
	        hasES5;
	// Special support for jQuery here because it's so commonly used.
	exports.jQueryInstance = window["jQuery"];
	if (exports.jQueryInstance && (typeof exports.jQueryInstance['cleanData'] === "function")) {
	    exports.cleanExternalData = function (node) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[158294:158538]", functionData => eval(functionData))};
	}
	else {
	    exports.cleanExternalData = function (node) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[158600:158603]", functionData => eval(functionData))};
	}
	//# sourceMappingURL=Environment.js.map

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../Interfaces.ts" />
	"use strict";
	/**
	* Html Template Engine based on JQuery's parseHTML
	* NOTE: This version does not support scripts in templates!
	*/
	var rsingleTag = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/, rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi, rtagName = /<([\w:-]+)/, rhtml = /<|&#?\w+;/, rscriptType = /^$|\/(?:java|ecma)script/i, 
	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
	    // Support: IE9
	    option: [1, "<select multiple='multiple'>", "</select>"],
	    thead: [1, "<table>", "</table>"],
	    // Some of the following wrappers are not fully defined, because
	    // their parent elements (except for "table" element) could be omitted
	    // since browser parsers are smart enough to auto-insert them
	    // Support: Android 2.3
	    // Android browser doesn't auto-insert colgroup
	    col: [2, "<table><colgroup>", "</colgroup></table>"],
	    // Auto-insert "tbody" element
	    tr: [2, "<table>", "</table>"],
	    // Auto-insert "tbody" and "tr" elements
	    td: [3, "<table>", "</table>"],
	    _default: [0, "", ""]
	};
	// Support: IE9
	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	var supportsCreateHTMLDocument = (function () {
	    var doc = document.implementation.createHTMLDocument("");
	    // Support: Node with jsdom<=1.5.0+
	    // jsdom's document created via the above method doesn't contain the body
	    if (!doc.body) {
	        return false;
	    }
	    doc.body.innerHTML = "<form></form><form></form>";
	    return doc.body.childNodes.length === 2;
	})();
	function merge(first, second) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[160457:160627]", functionData => eval(functionData))}
	function buildFragment(elems, context) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[160668:162597]", functionData => eval(functionData))}
	var HtmlTemplateEngine = (function () {
	    function HtmlTemplateEngine() {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[162674:162682]", functionData => eval(functionData))}
	    HtmlTemplateEngine.prototype.parse = function (data) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[162741:163251]", functionData => eval(functionData))};
	    return HtmlTemplateEngine;
	})();
	exports.default = HtmlTemplateEngine;
	//# sourceMappingURL=HtmlTemplateEngine.js.map

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../node_modules/rx/ts/rx.all.d.ts" />
	/// <reference path="../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	var Command_1 = __webpack_require__(20);
	"use strict";
	var CommandBinding = (function () {
	    function CommandBinding(domManager, app) {
	        this.priority = 0;
	        this.domManager = domManager;
	        this.app = app;
	    }
	    ////////////////////
	    // wx.IBinding
	    CommandBinding.prototype.applyBinding = function (node, options, ctx, state, module) {
	        var _this = this;
	        if (node.nodeType !== 1)
	            Utils_1.throwError("command-binding only operates on elements!");
	        if (options == null)
	            Utils_1.throwError("invalid binding-options!");
	        var compiled = this.domManager.compileBindingOptions(options, module);
	        var el = node;
	        var exp;
	        var cmdObservable;
	        var paramObservable;
	        var cleanup;
	        var isAnchor = el.tagName.toLowerCase() === "a";
	        var event = "click";
	        function doCleanup() {
	            if (cleanup) {
	                cleanup.dispose();
	                cleanup = null;
	            }
	        }
	        if (typeof compiled === "function") {
	            exp = compiled;
	            cmdObservable = this.domManager.expressionToObservable(exp, ctx);
	        }
	        else {
	            var opt = compiled;
	            exp = opt.command;
	            cmdObservable = this.domManager.expressionToObservable(exp, ctx);
	            if (opt.parameter) {
	                exp = opt.parameter;
	                paramObservable = this.domManager.expressionToObservable(exp, ctx);
	            }
	        }
	        if (paramObservable == null) {
	            paramObservable = Rx.Observable.return(undefined);
	        }
	        state.cleanup.add(Rx.Observable
	            .combineLatest(cmdObservable, paramObservable, function (cmd, param) { return ({ cmd: cmd, param: param }); })
	            .subscribe(function (x) {
	            try {
	                doCleanup();
	                cleanup = new Rx.CompositeDisposable();
	                if (x.cmd != null) {
	                    if (!Command_1.isCommand(x.cmd))
	                        Utils_1.throwError("Command-Binding only supports binding to a command!");
	                    // disabled handling if supported by element
	                    if (Utils_1.elementCanBeDisabled(el)) {
	                        // initial update
	                        el.disabled = !x.cmd.canExecute(x.param);
	                        // listen to changes
	                        cleanup.add(x.cmd.canExecuteObservable.subscribe(function (canExecute) {
	                            el.disabled = !canExecute;
	                        }));
	                    }
	                    // handle input events
	                    cleanup.add(Rx.Observable.fromEvent(el, "click").subscribe(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[166407:166919]", functionData => eval(functionData))}));
	                }
	            }
	            catch (e) {
	                _this.app.defaultExceptionHandler.onNext(e);
	            }
	        }));
	        // release closure references to GC 
	        state.cleanup.add(Rx.Disposable.create(function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[167179:167446]", functionData => eval(functionData))}));
	    };
	    CommandBinding.prototype.configure = function (options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[167519:167564]", functionData => eval(functionData))};
	    return CommandBinding;
	})();
	exports.default = CommandBinding;
	//# sourceMappingURL=Command.js.map

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../Interfaces.ts" />
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[168213:168254]", functionData => eval(functionData))}, void 0);
	        case 4: return decorators.reduceRight(function(o, d) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[168327:168368]", functionData => eval(functionData))}, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var IID_1 = __webpack_require__(10);
	var Utils_1 = __webpack_require__(5);
	var Reflect_1 = __webpack_require__(6);
	var Injector_1 = __webpack_require__(4);
	var res = __webpack_require__(11);
	"use strict";
	var Command = (function () {
	    /// <summary>
	    /// Don't use this directly, use commandXYZ instead
	    /// </summary>
	    function Command(canExecute, executeAsync, scheduler) {
	        var _this = this;
	        this.resultsSubject = new Rx.Subject();
	        this.isExecutingSubject = new Rx.Subject();
	        this.inflightCount = 0;
	        this.canExecuteLatest = false;
	        this.canExecuteDisp = null;
	        this.scheduler = scheduler || Injector_1.injector.get(res.app).mainThreadScheduler;
	        this.func = executeAsync;
	        // setup canExecute
	        this.canExecuteObs = canExecute
	            .combineLatest(this.isExecutingSubject.startWith(false), function (ce, ie) { return ce && !ie; })
	            .catch(function (ex) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[169548:169658]", functionData => eval(functionData))})
	            .do(function (x) {
	            _this.canExecuteLatest = x;
	        })
	            .publish();
	        if (Utils_1.isInUnitTest()) {
	            this.canExecuteObs.connect();
	        }
	        // setup thrownExceptions
	        this.exceptionsSubject = new Rx.Subject();
	        this.thrownExceptions = this.exceptionsSubject.asObservable();
	        this.exceptionsSubject
	            .observeOn(this.scheduler)
	            .subscribe(Injector_1.injector.get(res.app).defaultExceptionHandler);
	    }
	    //////////////////////////////////
	    // IDisposable implementation
	    Command.prototype.dispose = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[170304:170409]", functionData => eval(functionData))};
	    Object.defineProperty(Command.prototype, "canExecuteObservable", {
	        ////////////////////
	        /// wx.ICommand
	        get: function () {
	            var _this = this;
	            // setup canExecuteObservable
	            var ret = this.canExecuteObs.startWith(this.canExecuteLatest).distinctUntilChanged();
	            if (this.canExecuteDisp != null)
	                return ret;
	            return Rx.Observable.create(function (subj) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[170871:171264]", functionData => eval(functionData))});
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Command.prototype, "isExecuting", {
	        get: function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[171432:171523]", functionData => eval(functionData))},
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Command.prototype, "results", {
	        get: function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[171674:171742]", functionData => eval(functionData))},
	        enumerable: true,
	        configurable: true
	    });
	    Command.prototype.canExecute = function (parameter) {
	        if (this.canExecuteDisp == null)
	            this.canExecuteDisp = this.canExecuteObs.connect();
	        return this.canExecuteLatest;
	    };
	    Command.prototype.execute = function (parameter) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[172075:172191]", functionData => eval(functionData))};
	    Command.prototype.executeAsync = function (parameter) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[172252:173325]", functionData => eval(functionData))};
	    Command = __decorate([
	        Reflect_1.Implements(IID_1.default.ICommand),
	        Reflect_1.Implements(IID_1.default.IDisposable), 
	        __metadata('design:paramtypes', [Rx.Observable, Function, Object])
	    ], Command);
	    return Command;
	})();
	exports.Command = Command;
	var internal;
	(function (internal) {
	    internal.commandConstructor = Command;
	})(internal = exports.internal || (exports.internal = {}));
	// factory method implementation
	function command() {
	    var args = Utils_1.args2Array(arguments);
	    var canExecute;
	    var execute;
	    var scheduler;
	    var thisArg;
	    if (Utils_1.isFunction(args[0])) {
	        // first overload
	        execute = args.shift();
	        canExecute = Utils_1.isRxObservable(args[0]) ? args.shift() : Rx.Observable.return(true);
	        scheduler = Utils_1.isRxScheduler(args[0]) ? args.shift() : undefined;
	        thisArg = args.shift();
	        if (thisArg != null)
	            execute = execute.bind(thisArg);
	        return asyncCommand(canExecute, function (parameter) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[174393:174772]", functionData => eval(functionData))}, scheduler);
	    }
	    // second overload
	    canExecute = args.shift() || Rx.Observable.return(true);
	    scheduler = Utils_1.isRxScheduler(args[0]) ? args.shift() : undefined;
	    return new Command(canExecute, function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[175004:175039]", functionData => eval(functionData))}, scheduler);
	}
	exports.command = command;
	// factory method implementation
	function asyncCommand() {
	    var args = Utils_1.args2Array(arguments);
	    var canExecute;
	    var executeAsync;
	    var scheduler;
	    var thisArg;
	    if (Utils_1.isFunction(args[0])) {
	        // second overload
	        executeAsync = args.shift();
	        scheduler = Utils_1.isRxScheduler(args[0]) ? args.shift() : undefined;
	        thisArg = args.shift();
	        if (thisArg != null)
	            executeAsync = executeAsync.bind(thisArg);
	        return new Command(Rx.Observable.return(true), executeAsync, scheduler);
	    }
	    // first overload
	    canExecute = args.shift();
	    executeAsync = args.shift();
	    scheduler = Utils_1.isRxScheduler(args[0]) ? args.shift() : undefined;
	    return new Command(canExecute, executeAsync, scheduler);
	}
	exports.asyncCommand = asyncCommand;
	// factory method implementation
	function combinedCommand() {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[175998:177020]", functionData => eval(functionData))}
	exports.combinedCommand = combinedCommand;
	/**
	* Determines if target is an instance of a ICommand
	* @param {any} target
	*/
	function isCommand(target) {
	    if (target == null)
	        return false;
	    return target instanceof Command ||
	        Utils_1.queryInterface(target, IID_1.default.ICommand);
	}
	exports.isCommand = isCommand;
	//# sourceMappingURL=Command.js.map

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../node_modules/rx/ts/rx.all.d.ts" />
	/// <reference path="../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	var Module_1 = __webpack_require__(14);
	"use strict";
	var ModuleBinding = (function () {
	    function ModuleBinding(domManager, app) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[177763:177907]", functionData => eval(functionData))}
	    ////////////////////
	    // wx.IBinding
	    ModuleBinding.prototype.applyBinding = function (node, options, ctx, state, module) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[178043:181023]", functionData => eval(functionData))};
	    ModuleBinding.prototype.configure = function (options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[181085:181130]", functionData => eval(functionData))};
	    ModuleBinding.prototype.applyValue = function (el, module, template, ctx, state, initialApply) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[181232:181915]", functionData => eval(functionData))};
	    return ModuleBinding;
	})();
	exports.default = ModuleBinding;
	//# sourceMappingURL=Module.js.map

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../node_modules/rx/ts/rx.all.d.ts" />
	/// <reference path="../Interfaces.ts" />
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var Utils_1 = __webpack_require__(5);
	"use strict";
	var IfBinding = (function () {
	    function IfBinding(domManager, app) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[182563:182797]", functionData => eval(functionData))}
	    ////////////////////
	    // wx.IBinding
	    IfBinding.prototype.applyBinding = function (node, options, ctx, state, module) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[182929:185385]", functionData => eval(functionData))};
	    IfBinding.prototype.configure = function (options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[185443:185488]", functionData => eval(functionData))};
	    IfBinding.prototype.applyValue = function (el, value, template, ctx, animations, initialApply) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[185590:187557]", functionData => eval(functionData))};
	    return IfBinding;
	})();
	exports.IfBinding = IfBinding;
	var NotIfBinding = (function (_super) {
	    __extends(NotIfBinding, _super);
	    function NotIfBinding(domManager, app) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[187744:187827]", functionData => eval(functionData))}
	    return NotIfBinding;
	})(IfBinding);
	exports.NotIfBinding = NotIfBinding;
	//# sourceMappingURL=If.js.map

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../node_modules/rx/ts/rx.all.d.ts" />
	/// <reference path="../Interfaces.ts" />
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var Utils_1 = __webpack_require__(5);
	"use strict";
	var MultiOneWayChangeBindingBase = (function () {
	    function MultiOneWayChangeBindingBase(domManager, app, supportsDynamicValues) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[188543:188831]", functionData => eval(functionData))}
	    ////////////////////
	    // wx.IBinding
	    MultiOneWayChangeBindingBase.prototype.applyBinding = function (node, options, ctx, state, module) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[188982:190637]", functionData => eval(functionData))};
	    MultiOneWayChangeBindingBase.prototype.configure = function (options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[190714:190759]", functionData => eval(functionData))};
	    MultiOneWayChangeBindingBase.prototype.subscribe = function (el, obs, key, state) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[190848:191160]", functionData => eval(functionData))};
	    MultiOneWayChangeBindingBase.prototype.applyValue = function (el, key, value) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[191245:191319]", functionData => eval(functionData))};
	    return MultiOneWayChangeBindingBase;
	})();
	exports.MultiOneWayChangeBindingBase = MultiOneWayChangeBindingBase;
	var CssBinding = (function (_super) {
	    __extends(CssBinding, _super);
	    function CssBinding(domManager, app) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[191557:191616]", functionData => eval(functionData))}
	    CssBinding.prototype.applyValue = function (el, value, key) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[191682:192785]", functionData => eval(functionData))};
	    return CssBinding;
	})(MultiOneWayChangeBindingBase);
	exports.CssBinding = CssBinding;
	var AttrBinding = (function (_super) {
	    __extends(AttrBinding, _super);
	    function AttrBinding(domManager, app) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[193000:193081]", functionData => eval(functionData))}
	    AttrBinding.prototype.applyValue = function (el, value, key) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[193148:193681]", functionData => eval(functionData))};
	    return AttrBinding;
	})(MultiOneWayChangeBindingBase);
	exports.AttrBinding = AttrBinding;
	var StyleBinding = (function (_super) {
	    __extends(StyleBinding, _super);
	    function StyleBinding(domManager, app) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[193902:193955]", functionData => eval(functionData))}
	    StyleBinding.prototype.applyValue = function (el, value, key) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[194023:194258]", functionData => eval(functionData))};
	    return StyleBinding;
	})(MultiOneWayChangeBindingBase);
	exports.StyleBinding = StyleBinding;
	//# sourceMappingURL=MultiOneWay.js.map

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../node_modules/rx/ts/rx.all.d.ts" />
	/// <reference path="../Interfaces.ts" />
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var Utils_1 = __webpack_require__(5);
	"use strict";
	var SingleOneWayChangeBindingBase = (function () {
	    function SingleOneWayChangeBindingBase(domManager, app) {
	        this.priority = 0;
	        this.domManager = domManager;
	        this.app = app;
	    }
	    ////////////////////
	    // wx.IBinding
	    SingleOneWayChangeBindingBase.prototype.applyBinding = function (node, options, ctx, state, module) {
	        var _this = this;
	        if (node.nodeType !== 1)
	            Utils_1.throwError("binding only operates on elements!");
	        if (options == null)
	            Utils_1.throwError("invalid binding-options!");
	        var el = node;
	        var self = this;
	        var exp = this.domManager.compileBindingOptions(options, module);
	        var obs = this.domManager.expressionToObservable(exp, ctx);
	        // subscribe
	        state.cleanup.add(obs.subscribe(function (x) {
	            try {
	                self.applyValue(el, Utils_1.unwrapProperty(x));
	            }
	            catch (e) {
	                _this.app.defaultExceptionHandler.onNext(e);
	            }
	        }));
	        // release closure references to GC 
	        state.cleanup.add(Rx.Disposable.create(function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[196052:196313]", functionData => eval(functionData))}));
	    };
	    SingleOneWayChangeBindingBase.prototype.configure = function (options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[196401:196446]", functionData => eval(functionData))};
	    SingleOneWayChangeBindingBase.prototype.applyValue = function (el, value) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[196527:196601]", functionData => eval(functionData))};
	    return SingleOneWayChangeBindingBase;
	})();
	exports.SingleOneWayChangeBindingBase = SingleOneWayChangeBindingBase;
	////////////////////
	// Bindings
	var TextBinding = (function (_super) {
	    __extends(TextBinding, _super);
	    function TextBinding(domManager, app) {
	        _super.call(this, domManager, app);
	    }
	    TextBinding.prototype.applyValue = function (el, value) {
	        if ((value === null) || (value === undefined))
	            value = "";
	        el.textContent = value;
	    };
	    return TextBinding;
	})(SingleOneWayChangeBindingBase);
	exports.TextBinding = TextBinding;
	var VisibleBinding = (function (_super) {
	    __extends(VisibleBinding, _super);
	    function VisibleBinding(domManager, app) {
	        _super.call(this, domManager, app);
	        this.inverse = false;
	        this.inverse = false;
	        this.priority = 10;
	    }
	    VisibleBinding.prototype.configure = function (_options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[197552:197711]", functionData => eval(functionData))};
	    ////////////////////
	    // implementation
	    VisibleBinding.prototype.applyValue = function (el, value) {
	        value = this.inverse ? !value : value;
	        if (!VisibleBinding.useCssClass) {
	            if (!value) {
	                el.style.display = "none";
	            }
	            else {
	                el.style.display = "";
	            }
	        }
	        else {
	            Utils_1.toggleCssClass(el, !value, VisibleBinding.hiddenClass);
	        }
	    };
	    return VisibleBinding;
	})(SingleOneWayChangeBindingBase);
	exports.VisibleBinding = VisibleBinding;
	var HiddenBinding = (function (_super) {
	    __extends(HiddenBinding, _super);
	    function HiddenBinding(domManager, app) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[198436:198519]", functionData => eval(functionData))}
	    return HiddenBinding;
	})(VisibleBinding);
	exports.HiddenBinding = HiddenBinding;
	var HtmlBinding = (function (_super) {
	    __extends(HtmlBinding, _super);
	    function HtmlBinding(domManager, app) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[198728:198781]", functionData => eval(functionData))}
	    HtmlBinding.prototype.applyValue = function (el, value) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[198843:198963]", functionData => eval(functionData))};
	    return HtmlBinding;
	})(SingleOneWayChangeBindingBase);
	exports.HtmlBinding = HtmlBinding;
	var DisableBinding = (function (_super) {
	    __extends(DisableBinding, _super);
	    function DisableBinding(domManager, app) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[199191:199306]", functionData => eval(functionData))}
	    ////////////////////
	    // implementation
	    DisableBinding.prototype.applyValue = function (el, value) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[199420:199570]", functionData => eval(functionData))};
	    return DisableBinding;
	})(SingleOneWayChangeBindingBase);
	exports.DisableBinding = DisableBinding;
	var EnableBinding = (function (_super) {
	    __extends(EnableBinding, _super);
	    function EnableBinding(domManager, app) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[199804:199887]", functionData => eval(functionData))}
	    return EnableBinding;
	})(DisableBinding);
	exports.EnableBinding = EnableBinding;
	//# sourceMappingURL=SimpleOneWay.js.map

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../node_modules/rx/ts/rx.all.d.ts" />
	/// <reference path="../RxExtensions.d.ts" />
	var Utils_1 = __webpack_require__(5);
	var VirtualChildNodes_1 = __webpack_require__(26);
	var RefCountDisposeWrapper_1 = __webpack_require__(27);
	var Injector_1 = __webpack_require__(4);
	var List_1 = __webpack_require__(28);
	"use strict";
	var ForEachBinding = (function () {
	    function ForEachBinding(domManager, app) {
	        this.priority = 40;
	        this.controlsDescendants = true;
	        this.domManager = domManager;
	        this.app = app;
	        // hook into getDataContext() to map state['index'] to ctx['$index']
	        domManager.registerDataContextExtension(function (node, ctx) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[200815:200922]", functionData => eval(functionData))});
	    }
	    ////////////////////
	    // wx.IBinding
	    ForEachBinding.prototype.applyBinding = function (node, options, ctx, state, module) {
	        var _this = this;
	        if (node.nodeType !== 1)
	            Utils_1.throwError("forEach binding only operates on elements!");
	        if (options == null)
	            Utils_1.throwError("** invalid binding options!");
	        var compiled = this.domManager.compileBindingOptions(options, module);
	        var el = node;
	        var self = this;
	        var initialApply = true;
	        var cleanup = null;
	        var hooks;
	        var exp;
	        var setProxyFunc;
	        var animations = {};
	        if (typeof compiled === "object" && compiled.hasOwnProperty("data")) {
	            var opt = compiled;
	            exp = opt.data;
	            // extract animations
	            if (opt.itemEnter) {
	                animations.itemEnter = this.domManager.evaluateExpression(opt.itemEnter, ctx);
	                if (typeof animations.itemEnter === "string") {
	                    animations.itemEnter = module.animation(animations.itemEnter);
	                }
	            }
	            if (opt.itemLeave) {
	                animations.itemLeave = this.domManager.evaluateExpression(opt.itemLeave, ctx);
	                if (typeof animations.itemLeave === "string") {
	                    animations.itemLeave = module.animation(animations.itemLeave);
	                }
	            }
	            if (opt.hooks) {
	                // extract hooks
	                hooks = this.domManager.evaluateExpression(opt.hooks, ctx);
	            }
	            // optionally resolve hooks if passed as string identifier
	            if (typeof hooks === "string")
	                hooks = Injector_1.injector.get(hooks);
	            if (opt['debug']) {
	                if (opt['debug']['setProxyFunc']) {
	                    setProxyFunc = this.domManager.evaluateExpression(opt['debug']['setProxyFunc'], ctx);
	                }
	            }
	        }
	        else {
	            exp = compiled;
	        }
	        var obs = this.domManager.expressionToObservable(exp, ctx);
	        // add own disposables
	        state.cleanup.add(Rx.Disposable.create(function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[203179:203303]", functionData => eval(functionData))}));
	        // backup inner HTML
	        var template = new Array();
	        // subscribe
	        state.cleanup.add(obs.subscribe(function (x) {
	            try {
	                if (cleanup) {
	                    cleanup.dispose();
	                }
	                cleanup = new Rx.CompositeDisposable();
	                self.applyValue(el, x, hooks, animations, template, ctx, initialApply, cleanup, setProxyFunc);
	                initialApply = false;
	            }
	            catch (e) {
	                _this.app.defaultExceptionHandler.onNext(e);
	            }
	        }));
	        // release closure references to GC 
	        state.cleanup.add(Rx.Disposable.create(function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[204007:204356]", functionData => eval(functionData))}));
	    };
	    ForEachBinding.prototype.configure = function (options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[204429:204474]", functionData => eval(functionData))};
	    ForEachBinding.prototype.createIndexPropertyForNode = function (proxy, child, startIndex, trigger, templateLength) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[204596:205084]", functionData => eval(functionData))};
	    ForEachBinding.prototype.appendAllRows = function (proxy, list, ctx, template, hooks, animations, indexTrigger, isInitial) {
	        var length = list.length();
	        for (var i = 0; i < length; i++) {
	            this.appendRow(proxy, i, list.get(i), ctx, template, hooks, animations, indexTrigger, isInitial);
	        }
	    };
	    ForEachBinding.prototype.appendRow = function (proxy, index, item, ctx, template, hooks, animations, indexTrigger, isInitial) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[205558:206679]", functionData => eval(functionData))};
	    ForEachBinding.prototype.insertRow = function (proxy, index, item, ctx, template, hooks, animations, indexTrigger) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[206801:207868]", functionData => eval(functionData))};
	    ForEachBinding.prototype.removeRow = function (proxy, index, item, template, hooks, animations) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[207971:209009]", functionData => eval(functionData))};
	    ForEachBinding.prototype.moveRow = function (proxy, from, to, item, template, hooks, animations, indexTrigger) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[209127:211486]", functionData => eval(functionData))};
	    ForEachBinding.prototype.rebindRow = function (proxy, index, item, template, indexTrigger) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[211584:212409]", functionData => eval(functionData))};
	    ForEachBinding.prototype.observeList = function (proxy, ctx, template, cleanup, list, hooks, animations, indexTrigger) {
	        var _this = this;
	        var i;
	        var length;
	        cleanup.add(indexTrigger);
	        // initial insert
	        this.appendAllRows(proxy, list, ctx, template, hooks, animations, indexTrigger, true);
	        // track changes
	        cleanup.add(list.itemsAdded.subscribe(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[212846:213442]", functionData => eval(functionData))}));
	        cleanup.add(list.itemsRemoved.subscribe(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[213508:213765]", functionData => eval(functionData))}));
	        cleanup.add(list.itemsMoved.subscribe(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[213829:213985]", functionData => eval(functionData))}));
	        cleanup.add(list.itemReplaced.subscribe(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[214051:214184]", functionData => eval(functionData))}));
	        cleanup.add(list.shouldReset.subscribe(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[214249:214431]", functionData => eval(functionData))}));
	    };
	    ForEachBinding.prototype.applyValue = function (el, value, hooks, animations, template, ctx, initialApply, cleanup, setProxyFunc) {
	        var i, length;
	        if (initialApply) {
	            // clone to template
	            length = el.childNodes.length;
	            for (var i_4 = 0; i_4 < length; i_4++) {
	                template.push(el.childNodes[i_4].cloneNode(true));
	            }
	        }
	        // perform initial clear
	        while (el.firstChild) {
	            el.removeChild(el.firstChild);
	        }
	        if (template.length === 0)
	            return; // nothing to do
	        var proxy;
	        var self = this;
	        var recalcIndextrigger;
	        function nodeInsertCB(node, callbackData) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[215185:215920]", functionData => eval(functionData))}
	        function nodeRemoveCB(node) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[215958:216075]", functionData => eval(functionData))}
	        proxy = new VirtualChildNodes_1.default(el, false, nodeInsertCB, nodeRemoveCB);
	        if (setProxyFunc)
	            setProxyFunc(proxy);
	        cleanup.add(Rx.Disposable.create(function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[216280:216319]", functionData => eval(functionData))}));
	        if (Array.isArray(value)) {
	            var arr = value;
	            // iterate once and be done with it
	            length = arr.length;
	            for (var i_5 = 0; i_5 < length; i_5++) {
	                this.appendRow(proxy, i_5, arr[i_5], ctx, template, hooks, animations, undefined, true);
	            }
	        }
	        else if (List_1.isList(value)) {
	            var list = value;
	            recalcIndextrigger = new Rx.Subject();
	            this.observeList(proxy, ctx, template, cleanup, list, hooks, animations, recalcIndextrigger);
	        }
	    };
	    return ForEachBinding;
	})();
	exports.default = ForEachBinding;
	//# sourceMappingURL=ForEach.js.map

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	* VirtualChildNodes implements consisent and predictable manipulation
	* of a DOM Node's childNodes collection regardless its the true contents
	* @class
	**/
	var VirtualChildNodes = (function () {
	    function VirtualChildNodes(targetNode, initialSyncToTarget, insertCB, removeCB) {
	        this.childNodes = [];
	        this.targetNode = targetNode;
	        this.insertCB = insertCB;
	        this.removeCB = removeCB;
	        if (initialSyncToTarget) {
	            for (var i = 0; i < targetNode.childNodes.length; i++) {
	                this.childNodes.push(targetNode.childNodes[i]);
	            }
	        }
	    }
	    VirtualChildNodes.prototype.appendChilds = function (nodes, callbackData) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[217822:218369]", functionData => eval(functionData))};
	    VirtualChildNodes.prototype.insertChilds = function (index, nodes, callbackData) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[218457:219194]", functionData => eval(functionData))};
	    VirtualChildNodes.prototype.removeChilds = function (index, count, keepDom) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[219277:219899]", functionData => eval(functionData))};
	    VirtualChildNodes.prototype.clear = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[219954:220329]", functionData => eval(functionData))};
	    return VirtualChildNodes;
	})();
	exports.default = VirtualChildNodes;
	//# sourceMappingURL=VirtualChildNodes.js.map

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../Interfaces.ts" />
	"use strict";
	var RefCountDisposeWrapper = (function () {
	    function RefCountDisposeWrapper(inner, initialRefCount) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[220693:220838]", functionData => eval(functionData))}
	    RefCountDisposeWrapper.prototype.addRef = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[220898:220932]", functionData => eval(functionData))};
	    RefCountDisposeWrapper.prototype.release = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[220994:221149]", functionData => eval(functionData))};
	    RefCountDisposeWrapper.prototype.dispose = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[221211:221244]", functionData => eval(functionData))};
	    return RefCountDisposeWrapper;
	})();
	exports.default = RefCountDisposeWrapper;
	//# sourceMappingURL=RefCountDisposeWrapper.js.map

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../Interfaces.ts" />
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[222158:222199]", functionData => eval(functionData))}, void 0);
	        case 4: return decorators.reduceRight(function(o, d) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[222272:222313]", functionData => eval(functionData))}, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var Utils_1 = __webpack_require__(5);
	var Oid_1 = __webpack_require__(2);
	var IID_1 = __webpack_require__(10);
	var Lazy_1 = __webpack_require__(29);
	var ScheduledSubject_1 = __webpack_require__(30);
	var Events_1 = __webpack_require__(9);
	var RefCountDisposeWrapper_1 = __webpack_require__(27);
	var log = __webpack_require__(12);
	var Reflect_1 = __webpack_require__(6);
	var Injector_1 = __webpack_require__(4);
	var res = __webpack_require__(11);
	"use strict";
	/**
	* ReactiveUI's awesome ReactiveList ported to Typescript
	* @class
	*/
	var ObservableList = (function () {
	    function ObservableList(initialContents, resetChangeThreshold, scheduler) {
	        if (resetChangeThreshold === void 0) { resetChangeThreshold = 0.3; }
	        if (scheduler === void 0) { scheduler = null; }
	        //////////////////////////
	        // Some array convenience members
	        this.push = this.add;
	        this.changeNotificationsSuppressed = 0;
	        this.propertyChangeWatchers = null;
	        this.resetChangeThreshold = 0;
	        this.resetSubCount = 0;
	        this.hasWhinedAboutNoResetSub = false;
	        this.app = Injector_1.injector.get(res.app);
	        this.setupRx(initialContents, resetChangeThreshold, scheduler);
	    }
	    //////////////////////////////////
	    // wx.IDisposable implementation
	    ObservableList.prototype.dispose = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[223903:223959]", functionData => eval(functionData))};
	    Object.defineProperty(ObservableList.prototype, "isReadOnly", {
	        ////////////////////
	        /// wx.IObservableList<T>
	        get: function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[224121:224160]", functionData => eval(functionData))},
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ObservableList.prototype, "itemsAdded", {
	        get: function () {
	            if (!this._itemsAdded)
	                this._itemsAdded = this.itemsAddedSubject.value.asObservable();
	            return this._itemsAdded;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ObservableList.prototype, "beforeItemsAdded", {
	        get: function () {
	            if (!this._beforeItemsAdded)
	                this._beforeItemsAdded = this.beforeItemsAddedSubject.value.asObservable();
	            return this._beforeItemsAdded;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ObservableList.prototype, "itemsRemoved", {
	        get: function () {
	            if (!this._itemsRemoved)
	                this._itemsRemoved = this.itemsRemovedSubject.value.asObservable();
	            return this._itemsRemoved;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ObservableList.prototype, "beforeItemsRemoved", {
	        get: function () {
	            if (!this._beforeItemsRemoved)
	                this._beforeItemsRemoved = this.beforeItemsRemovedSubject.value.asObservable();
	            return this._beforeItemsRemoved;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ObservableList.prototype, "itemReplaced", {
	        get: function () {
	            if (!this._itemReplaced)
	                this._itemReplaced = this.itemReplacedSubject.value.asObservable();
	            return this._itemReplaced;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ObservableList.prototype, "beforeItemReplaced", {
	        get: function () {
	            if (!this._beforeItemReplaced)
	                this._beforeItemReplaced = this.beforeItemReplacedSubject.value.asObservable();
	            return this._beforeItemReplaced;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ObservableList.prototype, "beforeItemsMoved", {
	        get: function () {
	            if (!this._beforeItemsMoved)
	                this._beforeItemsMoved = this.beforeItemsMovedSubject.value.asObservable();
	            return this._beforeItemsMoved;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ObservableList.prototype, "itemsMoved", {
	        get: function () {
	            if (!this._itemsMoved)
	                this._itemsMoved = this.itemsMovedSubject.value.asObservable();
	            return this._itemsMoved;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ObservableList.prototype, "lengthChanging", {
	        get: function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[227109:227406]", functionData => eval(functionData))},
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ObservableList.prototype, "lengthChanged", {
	        get: function () {
	            var _this = this;
	            if (!this._lengthChanged)
	                this._lengthChanged = this.listChanged.select(function (_) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[227718:227786]", functionData => eval(functionData))}).distinctUntilChanged();
	            return this._lengthChanged;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ObservableList.prototype, "itemChanging", {
	        get: function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[228026:228201]", functionData => eval(functionData))},
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ObservableList.prototype, "itemChanged", {
	        get: function () {
	            if (!this._itemChanged)
	                this._itemChanged = this.itemChangedSubject.value.asObservable();
	            return this._itemChanged;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ObservableList.prototype, "shouldReset", {
	        get: function () {
	            var _this = this;
	            return this.refcountSubscribers(this.listChanged.selectMany(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[228815:228899]", functionData => eval(functionData))}), function (x) { return _this.resetSubCount += x; });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ObservableList.prototype, "changeTrackingEnabled", {
	        get: function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[229136:229205]", functionData => eval(functionData))},
	        set: function (newValue) {
	            var _this = this;
	            if (this.propertyChangeWatchers != null && newValue)
	                return;
	            if (this.propertyChangeWatchers == null && !newValue)
	                return;
	            if (newValue) {
	                this.propertyChangeWatchers = {};
	                this.inner.forEach(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[229586:229632]", functionData => eval(functionData))});
	            }
	            else {
	                this.clearAllPropertyChangeWatchers();
	                this.propertyChangeWatchers = null;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ObservableList.prototype.addRange = function (items) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[229928:231442]", functionData => eval(functionData))};
	    ObservableList.prototype.insertRange = function (index, items) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[231512:233134]", functionData => eval(functionData))};
	    ObservableList.prototype.removeAll = function (items) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[233195:233692]", functionData => eval(functionData))};
	    ObservableList.prototype.removeRange = function (index, count) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[233762:235263]", functionData => eval(functionData))};
	    ObservableList.prototype.toArray = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[235317:235353]", functionData => eval(functionData))};
	    ObservableList.prototype.reset = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[235405:235455]", functionData => eval(functionData))};
	    ObservableList.prototype.add = function (item) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[235509:235568]", functionData => eval(functionData))};
	    ObservableList.prototype.clear = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[235620:235656]", functionData => eval(functionData))};
	    ObservableList.prototype.contains = function (item) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[235715:235772]", functionData => eval(functionData))};
	    ObservableList.prototype.remove = function (item) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[235829:235993]", functionData => eval(functionData))};
	    ObservableList.prototype.indexOf = function (item) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[236051:236101]", functionData => eval(functionData))};
	    ObservableList.prototype.insert = function (index, item) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[236165:236212]", functionData => eval(functionData))};
	    ObservableList.prototype.removeAt = function (index) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[236272:236313]", functionData => eval(functionData))};
	    ObservableList.prototype.move = function (oldIndex, newIndex) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[236382:236434]", functionData => eval(functionData))};
	    ObservableList.prototype.project = function () {
	        var args = Utils_1.args2Array(arguments);
	        var filter = args.shift();
	        if (filter != null && Utils_1.isRxObservable(filter)) {
	            return new ObservableListProjection(this, undefined, undefined, undefined, filter, args.shift());
	        }
	        var orderer = args.shift();
	        if (orderer != null && Utils_1.isRxObservable(orderer)) {
	            return new ObservableListProjection(this, filter, undefined, undefined, orderer, args.shift());
	        }
	        var selector = args.shift();
	        if (selector != null && Utils_1.isRxObservable(selector)) {
	            return new ObservableListProjection(this, filter, orderer, undefined, selector, args.shift());
	        }
	        return new ObservableListProjection(this, filter, orderer, selector, args.shift(), args.shift());
	    };
	    ObservableList.prototype.suppressChangeNotifications = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[237401:238177]", functionData => eval(functionData))};
	    ObservableList.prototype.get = function (index) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[238232:238275]", functionData => eval(functionData))};
	    ObservableList.prototype.set = function (index, item) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[238336:239156]", functionData => eval(functionData))};
	    ObservableList.prototype.sort = function (comparison) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[239217:239353]", functionData => eval(functionData))};
	    ObservableList.prototype.forEach = function (callbackfn, thisArg) {
	        this.inner.forEach(callbackfn, thisArg);
	    };
	    ObservableList.prototype.map = function (callbackfn, thisArg) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[239553:239614]", functionData => eval(functionData))};
	    ObservableList.prototype.filter = function (callbackfn, thisArg) {
	        return this.inner.filter(callbackfn, thisArg);
	    };
	    ObservableList.prototype.some = function (callbackfn, thisArg) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[239820:239882]", functionData => eval(functionData))};
	    ObservableList.prototype.every = function (callbackfn, thisArg) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[239953:240016]", functionData => eval(functionData))};
	    ObservableList.prototype.setupRx = function (initialContents, resetChangeThreshold, scheduler) {
	        if (resetChangeThreshold === void 0) { resetChangeThreshold = 0.3; }
	        if (scheduler === void 0) { scheduler = null; }
	        scheduler = scheduler || Injector_1.injector.get(res.app).mainThreadScheduler;
	        this.resetChangeThreshold = resetChangeThreshold;
	        if (this.inner === undefined)
	            this.inner = new Array();
	        this.beforeItemsAddedSubject = new Lazy_1.default(function () { return new Rx.Subject(); });
	        this.itemsAddedSubject = new Lazy_1.default(function () { return new Rx.Subject(); });
	        this.beforeItemsRemovedSubject = new Lazy_1.default(function () { return new Rx.Subject(); });
	        this.itemsRemovedSubject = new Lazy_1.default(function () { return new Rx.Subject(); });
	        this.beforeItemReplacedSubject = new Lazy_1.default(function () { return new Rx.Subject(); });
	        this.itemReplacedSubject = new Lazy_1.default(function () { return new Rx.Subject(); });
	        this.resetSubject = new Rx.Subject();
	        this.beforeResetSubject = new Rx.Subject();
	        this.itemChangingSubject = new Lazy_1.default(function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[241249:241335]", functionData => eval(functionData))});
	        this.itemChangedSubject = new Lazy_1.default(function () {
	            return ScheduledSubject_1.createScheduledSubject(scheduler);
	        });
	        this.beforeItemsMovedSubject = new Lazy_1.default(function () { return new Rx.Subject(); });
	        this.itemsMovedSubject = new Lazy_1.default(function () { return new Rx.Subject(); });
	        this.listChanged = Rx.Observable.merge(this.itemsAdded.select(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[241775:241792]", functionData => eval(functionData))}), this.itemsRemoved.select(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[241833:241850]", functionData => eval(functionData))}), this.itemReplaced.select(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[241891:241908]", functionData => eval(functionData))}), this.itemsMoved.select(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[241947:241964]", functionData => eval(functionData))}), this.resetSubject.select(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[242005:242021]", functionData => eval(functionData))}))
	            .publish()
	            .refCount();
	        this.listChanging = Rx.Observable.merge(this.beforeItemsAdded.select(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[242165:242182]", functionData => eval(functionData))}), this.beforeItemsRemoved.select(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[242229:242246]", functionData => eval(functionData))}), this.beforeItemReplaced.select(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[242293:242310]", functionData => eval(functionData))}), this.beforeItemsMoved.select(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[242355:242372]", functionData => eval(functionData))}), this.beforeResetSubject.select(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[242419:242435]", functionData => eval(functionData))}))
	            .publish()
	            .refCount();
	        if (initialContents) {
	            Array.prototype.splice.apply(this.inner, [0, 0].concat(initialContents));
	        }
	        this.length = this.lengthChanged.toProperty(this.inner.length);
	        this.isEmpty = this.lengthChanged
	            .select(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[242768:242789]", functionData => eval(functionData))})
	            .toProperty(this.inner.length === 0);
	    };
	    ObservableList.prototype.areChangeNotificationsEnabled = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[242924:242990]", functionData => eval(functionData))};
	    ObservableList.prototype.insertItem = function (index, item) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[243058:243716]", functionData => eval(functionData))};
	    ObservableList.prototype.removeItem = function (index) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[243778:244481]", functionData => eval(functionData))};
	    ObservableList.prototype.moveItem = function (oldIndex, newIndex) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[244554:245165]", functionData => eval(functionData))};
	    ObservableList.prototype.clearItems = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[245222:245764]", functionData => eval(functionData))};
	    ObservableList.prototype.addItemToPropertyTracking = function (toTrack) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[245843:247046]", functionData => eval(functionData))};
	    ObservableList.prototype.removeItemFromPropertyTracking = function (toUntrack) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[247132:247272]", functionData => eval(functionData))};
	    ObservableList.prototype.clearAllPropertyChangeWatchers = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[247349:247650]", functionData => eval(functionData))};
	    ObservableList.prototype.refcountSubscribers = function (input, block) {
	        return Rx.Observable.create(function (subj) {
	            block(1);
	            return new Rx.CompositeDisposable(input.subscribe(subj), Rx.Disposable.create(function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[247911:247932]", functionData => eval(functionData))}));
	        });
	    };
	    ObservableList.prototype.publishResetNotification = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[248026:248075]", functionData => eval(functionData))};
	    ObservableList.prototype.publishBeforeResetNotification = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[248152:248207]", functionData => eval(functionData))};
	    ObservableList.prototype.isLengthAboveResetThreshold = function (toChangeLength) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[248295:248406]", functionData => eval(functionData))};
	    ObservableList = __decorate([
	        Reflect_1.Implements(IID_1.default.IObservableList),
	        Reflect_1.Implements(IID_1.default.IDisposable), 
	        __metadata('design:paramtypes', [Array, Number, Object])
	    ], ObservableList);
	    return ObservableList;
	})();
	exports.ObservableList = ObservableList;
	var ObservableListProjection = (function (_super) {
	    __extends(ObservableListProjection, _super);
	    function ObservableListProjection(source, filter, orderer, selector, refreshTrigger, scheduler) {
	        _super.call(this);
	        ////////////////////
	        // wx.Implementation
	        this.readonlyExceptionMessage = "Derived collections cannot be modified.";
	        // This list maps indices in this collection to their corresponding indices in the source collection.
	        this.indexToSourceIndexMap = [];
	        this.sourceCopy = [];
	        this.disp = new Rx.CompositeDisposable();
	        this.source = source;
	        this.selector = selector || (function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[249427:249440]", functionData => eval(functionData))});
	        this._filter = filter;
	        this.orderer = orderer;
	        this.refreshTrigger = refreshTrigger;
	        this.scheduler = scheduler || Rx.Scheduler.immediate;
	        this.addAllItemsFromSourceCollection();
	        this.wireUpChangeNotifications();
	    }
	    Object.defineProperty(ObservableListProjection.prototype, "isReadOnly", {
	        //////////////////////////////////
	        // ObservableList overrides to enforce readonly contract
	        get: function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[249932:249970]", functionData => eval(functionData))},
	        enumerable: true,
	        configurable: true
	    });
	    ObservableListProjection.prototype.set = function (index, item) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[250105:250173]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.addRange = function (items) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[250243:250311]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.insertRange = function (index, items) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[250391:250459]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.removeAll = function (items) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[250530:250598]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.removeRange = function (index, count) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[250678:250746]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.add = function (item) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[250810:250878]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.clear = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[250940:251008]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.remove = function (item) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[251075:251170]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.insert = function (index, item) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[251244:251312]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.removeAt = function (index) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[251382:251450]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.move = function (oldIndex, newIndex) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[251529:251597]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.sort = function (comparison) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[251668:251736]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.reset = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[251798:252043]", functionData => eval(functionData))};
	    //////////////////////////////////
	    // wx.IDisposable implementation
	    ObservableListProjection.prototype.dispose = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[252185:252269]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.referenceEquals = function (a, b) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[252345:252406]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.refresh = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[252470:252632]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.wireUpChangeNotifications = function () {
	        var _this = this;
	        this.disp.add(this.source.itemsAdded.observeOn(this.scheduler).subscribe(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[252838:252886]", functionData => eval(functionData))}));
	        this.disp.add(this.source.itemsRemoved.observeOn(this.scheduler).subscribe(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[252987:253037]", functionData => eval(functionData))}));
	        this.disp.add(this.source.itemsMoved.observeOn(this.scheduler).subscribe(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[253136:253184]", functionData => eval(functionData))}));
	        this.disp.add(this.source.itemReplaced.observeOn(this.scheduler).subscribe(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[253285:253336]", functionData => eval(functionData))}));
	        this.disp.add(this.source.shouldReset.observeOn(this.scheduler).subscribe(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[253436:253476]", functionData => eval(functionData))}));
	        this.disp.add(this.source.itemChanged.select(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[253547:253567]", functionData => eval(functionData))}).observeOn(this.scheduler).subscribe(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[253618:253652]", functionData => eval(functionData))}));
	        if (this.refreshTrigger != null) {
	            this.disp.add(this.refreshTrigger.observeOn(this.scheduler).subscribe(function (_) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[253796:253823]", functionData => eval(functionData))}));
	        }
	    };
	    ObservableListProjection.prototype.onItemsAdded = function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[253914:254386]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.onItemsRemoved = function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[254458:254899]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.onItemsMoved = function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[254969:257050]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.onItemsReplaced = function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[257123:257336]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.onItemChanged = function (changedItem) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[257417:261387]", functionData => eval(functionData))};
	    /// <summary>
	    /// Gets a value indicating whether or not the item fits (sort-wise) at the provided index. The determination
	    /// is made by checking whether or not it's considered larger than or equal to the preceeding item and if
	    /// it's less than or equal to the succeeding item.
	    /// </summary>
	    ObservableListProjection.prototype.canItemStayAtPosition = function (item, currentIndex) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[261805:262451]", functionData => eval(functionData))};
	    /// <summary>
	    /// Gets the index of the dervived item super. on it's originating element index in the source collection.
	    /// </summary>
	    ObservableListProjection.prototype.getIndexFromSourceIndex = function (sourceIndex) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[262693:262766]", functionData => eval(functionData))};
	    /// <summary>
	    /// Returns one or more positions in the source collection where the given item is found super. on the
	    /// provided equality comparer.
	    /// </summary>
	    ObservableListProjection.prototype.indexOfAll = function (source, item) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[263029:263336]", functionData => eval(functionData))};
	    /// <summary>
	    /// wx.Increases (or decreases depending on move direction) all source indices between the source and destination
	    /// move indices.
	    /// </summary>
	    ObservableListProjection.prototype.moveSourceIndexInMap = function (oldSourceIndex, newSourceIndex) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[263624:264238]", functionData => eval(functionData))};
	    /// <summary>
	    /// wx.Increases (or decreases) all source indices equal to or higher than the threshold. Represents an
	    /// insert or remove of one or more items in the source list thus causing all subsequent items to shift
	    /// up or down.
	    /// </summary>
	    ObservableListProjection.prototype.shiftIndicesAtOrOverThreshold = function (threshold, value) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[264618:264843]", functionData => eval(functionData))};
	    /// <summary>
	    /// wx.Increases (or decreases) all source indices within the range (lower inclusive, upper exclusive). 
	    /// </summary>
	    ObservableListProjection.prototype.shiftSourceIndicesInRange = function (rangeStart, rangeStop, value) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[265102:265399]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.addAllItemsFromSourceCollection = function () {
	        var _this = this;
	        // Debug.Assert(sourceCopy.length == 0, "Expected source copy to be empty");
	        var sourceIndex = 0;
	        this.source.forEach(function (sourceItem) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[265683:265983]", functionData => eval(functionData))});
	    };
	    ObservableListProjection.prototype.lear = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[266053:266178]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.nsertAndMap = function (sourceIndex, value) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[266264:266497]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.emoveAt = function (destinationIndex) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[266577:266715]", functionData => eval(functionData))};
	    ObservableListProjection.prototype.positionForNewItem = function (sourceIndex, value) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[266808:267227]", functionData => eval(functionData))};
	    ObservableListProjection.positionForNewItemArray = function (array, item, orderer) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[267317:267431]", functionData => eval(functionData))};
	    ObservableListProjection.positionForNewItemArray2 = function (array, index, count, item, orderer) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[267536:268378]", functionData => eval(functionData))};
	    /// <summary>
	    /// Calculates a new destination for an updated item that's already in the list.
	    /// </summary>
	    ObservableListProjection.prototype.newPositionForExistingItem = function (sourceIndex, currentIndex, item) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[268617:269007]", functionData => eval(functionData))};
	    /// <summary>
	    /// Calculates a new destination for an updated item that's already in the list.
	    /// </summary>
	    ObservableListProjection.newPositionForExistingItem2 = function (array, item, currentIndex, orderer) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[269240:271343]", functionData => eval(functionData))};
	    ObservableListProjection.defaultOrderer = function (a, b) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[271408:271675]", functionData => eval(functionData))};
	    return ObservableListProjection;
	})(ObservableList);
	/**
	* Creates a new observable list with optional default contents
	* @param {Array<T>} initialContents The initial contents of the list
	* @param {number = 0.3} resetChangeThreshold
	*/
	function list(initialContents, resetChangeThreshold, scheduler) {
	    if (resetChangeThreshold === void 0) { resetChangeThreshold = 0.3; }
	    if (scheduler === void 0) { scheduler = null; }
	    return new ObservableList(initialContents, resetChangeThreshold, scheduler);
	}
	exports.list = list;
	/**
	* Determines if target is an instance of a IObservableList
	* @param {any} target
	*/
	function isList(target) {
	    if (target == null)
	        return false;
	    return target instanceof ObservableList;
	}
	exports.isList = isList;
	//# sourceMappingURL=List.js.map

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	* .Net's Lazy<T>
	* @class
	*/
	var Lazy = (function () {
	    function Lazy(createValue) {
	        this.createValue = createValue;
	    }
	    Object.defineProperty(Lazy.prototype, "value", {
	        get: function () {
	            if (!this.isValueCreated) {
	                this.createdValue = this.createValue();
	                this.isValueCreated = true;
	            }
	            return this.createdValue;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return Lazy;
	})();
	exports.default = Lazy;
	//# sourceMappingURL=Lazy.js.map

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var Utils_1 = __webpack_require__(5);
	"use strict";
	var ScheduledSubject = (function () {
	    function ScheduledSubject(scheduler, defaultObserver, defaultSubject) {
	        this._observerRefCount = 0;
	        this._defaultObserverSub = Rx.Disposable.empty;
	        this._scheduler = scheduler;
	        this._defaultObserver = defaultObserver;
	        this._subject = defaultSubject || new Rx.Subject();
	        if (defaultObserver != null) {
	            this._defaultObserverSub = this._subject
	                .observeOn(this._scheduler)
	                .subscribe(this._defaultObserver);
	        }
	    }
	    ScheduledSubject.prototype.dispose = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[273928:274037]", functionData => eval(functionData))};
	    ScheduledSubject.prototype.onCompleted = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[274097:274143]", functionData => eval(functionData))};
	    ScheduledSubject.prototype.onError = function (error) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[274204:274251]", functionData => eval(functionData))};
	    ScheduledSubject.prototype.onNext = function (value) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[274311:274357]", functionData => eval(functionData))};
	    ScheduledSubject.prototype.subscribe = function (observer) {
	        var _this = this;
	        if (this._defaultObserverSub)
	            this._defaultObserverSub.dispose();
	        this._observerRefCount++;
	        return new Rx.CompositeDisposable(this._subject.observeOn(this._scheduler).subscribe(observer), Rx.Disposable.create(function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[274713:274950]", functionData => eval(functionData))}));
	    };
	    return ScheduledSubject;
	})();
	function createScheduledSubject(scheduler, defaultObserver, defaultSubject) {
	    var scheduled = new ScheduledSubject(scheduler, defaultObserver, defaultSubject);
	    var result = Utils_1.extend(scheduled, new Rx.Subject(), true);
	    return result;
	}
	exports.createScheduledSubject = createScheduledSubject;
	//# sourceMappingURL=ScheduledSubject.js.map

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../node_modules/rx/ts/rx.all.d.ts" />
	/// <reference path="../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	var Command_1 = __webpack_require__(20);
	"use strict";
	var EventBinding = (function () {
	    function EventBinding(domManager, app) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[275717:275817]", functionData => eval(functionData))}
	    ////////////////////
	    // wx.IBinding
	    EventBinding.prototype.applyBinding = function (node, options, ctx, state, module) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[275952:276831]", functionData => eval(functionData))};
	    EventBinding.prototype.configure = function (options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[276892:276937]", functionData => eval(functionData))};
	    EventBinding.prototype.wireEvent = function (el, value, eventName, ctx, state, module) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[277031:278948]", functionData => eval(functionData))};
	    return EventBinding;
	})();
	exports.default = EventBinding;
	//# sourceMappingURL=Event.js.map

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../node_modules/rx/ts/rx.all.d.ts" />
	/// <reference path="../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	var res = __webpack_require__(11);
	"use strict";
	var ValueBinding = (function () {
	    function ValueBinding(domManager, app) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[279401:279501]", functionData => eval(functionData))}
	    ////////////////////
	    // wx.IBinding
	    ValueBinding.prototype.applyBinding = function (node, options, ctx, state, module) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[279636:282907]", functionData => eval(functionData))};
	    ValueBinding.prototype.configure = function (options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[282968:283013]", functionData => eval(functionData))};
	    return ValueBinding;
	})();
	exports.default = ValueBinding;
	/**
	 * For certain elements such as select and input type=radio we store
	 * the real element value in NodeState if it is anything other than a
	 * string. This method returns that value.
	 * @param {Node} node
	 * @param {IDomManager} domManager
	 */
	function getNodeValue(node, domManager) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[283376:283566]", functionData => eval(functionData))}
	exports.getNodeValue = getNodeValue;
	/**
	 * Associate a value with an element. Either by using its value-attribute
	 * or storing it in NodeState
	 * @param {Node} node
	 * @param {any} value
	 * @param {IDomManager} domManager
	 */
	function setNodeValue(node, value, domManager) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[283851:284884]", functionData => eval(functionData))}
	exports.setNodeValue = setNodeValue;
	//# sourceMappingURL=Value.js.map

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../node_modules/rx/ts/rx.all.d.ts" />
	/// <reference path="../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	"use strict";
	var HasFocusBinding = (function () {
	    function HasFocusBinding(domManager, app) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[285278:285379]", functionData => eval(functionData))}
	    ////////////////////
	    // wx.IBinding
	    HasFocusBinding.prototype.applyBinding = function (node, options, ctx, state, module) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[285517:289752]", functionData => eval(functionData))};
	    HasFocusBinding.prototype.configure = function (options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[289816:289861]", functionData => eval(functionData))};
	    HasFocusBinding.prototype.getFocusEventObservables = function (el) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[289935:290391]", functionData => eval(functionData))};
	    return HasFocusBinding;
	})();
	exports.default = HasFocusBinding;
	//# sourceMappingURL=HasFocus.js.map

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../node_modules/rx/ts/rx.all.d.ts" />
	/// <reference path="../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	"use strict";
	var WithBinding = (function () {
	    function WithBinding(domManager, app) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[290815:290958]", functionData => eval(functionData))}
	    ////////////////////
	    // wx.IBinding
	    WithBinding.prototype.applyBinding = function (node, options, ctx, state, module) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[291092:292224]", functionData => eval(functionData))};
	    WithBinding.prototype.configure = function (options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[292284:292329]", functionData => eval(functionData))};
	    WithBinding.prototype.applyValue = function (el, value, state) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[292399:292601]", functionData => eval(functionData))};
	    return WithBinding;
	})();
	exports.default = WithBinding;
	//# sourceMappingURL=With.js.map

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../node_modules/rx/ts/rx.all.d.ts" />
	/// <reference path="../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	"use strict";
	var CheckedBinding = (function () {
	    function CheckedBinding(domManager, app) {
	        this.priority = 0;
	        this.domManager = domManager;
	        this.app = app;
	    }
	    ////////////////////
	    // wx.IBinding
	    CheckedBinding.prototype.applyBinding = function (node, options, ctx, state, module) {
	        var _this = this;
	        if (node.nodeType !== 1)
	            Utils_1.throwError("checked-binding only operates on elements!");
	        if (options == null)
	            Utils_1.throwError("invalid binding-options!");
	        var el = node;
	        var tag = el.tagName.toLowerCase();
	        var isCheckBox = el.type === 'checkbox';
	        var isRadioButton = el.type === 'radio';
	        if (tag !== 'input' || (!isCheckBox && !isRadioButton))
	            Utils_1.throwError("checked-binding only operates on checkboxes and radio-buttons");
	        var exp = this.domManager.compileBindingOptions(options, module);
	        var prop;
	        var cleanup;
	        function doCleanup() {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[293967:294091]", functionData => eval(functionData))}
	        function updateElement(value) {
	            el.checked = value;
	        }
	        state.cleanup.add(this.domManager.expressionToObservable(exp, ctx).subscribe(function (model) {
	            try {
	                if (!Utils_1.isProperty(model)) {
	                    // initial and final update
	                    updateElement(model);
	                }
	                else {
	                    doCleanup();
	                    cleanup = new Rx.CompositeDisposable();
	                    // update on property change
	                    prop = model;
	                    cleanup.add(prop.changed.subscribe(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[294736:294803]", functionData => eval(functionData))}));
	                    // initial update
	                    updateElement(prop());
	                    // don't attempt to updated computed properties
	                    if (!prop.source) {
	                        // wire change-events depending on browser and version
	                        var events = _this.getCheckedEventObservables(el);
	                        cleanup.add(Rx.Observable.merge(events).subscribe(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[295244:295539]", functionData => eval(functionData))}));
	                    }
	                }
	            }
	            catch (e) {
	                _this.app.defaultExceptionHandler.onNext(e);
	            }
	        }));
	        // release closure references to GC 
	        state.cleanup.add(Rx.Disposable.create(function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[295822:296089]", functionData => eval(functionData))}));
	    };
	    CheckedBinding.prototype.configure = function (options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[296162:296207]", functionData => eval(functionData))};
	    CheckedBinding.prototype.getCheckedEventObservables = function (el) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[296282:296461]", functionData => eval(functionData))};
	    return CheckedBinding;
	})();
	exports.default = CheckedBinding;
	//# sourceMappingURL=Checked.js.map

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../node_modules/rx/ts/rx.all.d.ts" />
	/// <reference path="../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	var Command_1 = __webpack_require__(20);
	"use strict";
	var keysByCode = {
	    8: 'backspace',
	    9: 'tab',
	    13: 'enter',
	    27: 'esc',
	    32: 'space',
	    33: 'pageup',
	    34: 'pagedown',
	    35: 'end',
	    36: 'home',
	    37: 'left',
	    38: 'up',
	    39: 'right',
	    40: 'down',
	    45: 'insert',
	    46: 'delete'
	};
	var KeyPressBinding = (function () {
	    function KeyPressBinding(domManager, app) {
	        this.priority = 0;
	        this.domManager = domManager;
	        this.app = app;
	    }
	    ////////////////////
	    // wx.IBinding
	    KeyPressBinding.prototype.applyBinding = function (node, options, ctx, state, module) {
	        var _this = this;
	        if (node.nodeType !== 1)
	            Utils_1.throwError("keyPress-binding only operates on elements!");
	        if (options == null)
	            Utils_1.throwError("invalid binding-options!");
	        var el = node;
	        // create an observable for key combination
	        var tokens = this.domManager.getObjectLiteralTokens(options);
	        var obs = Rx.Observable.fromEvent(el, "keydown")
	            .where(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[297932:297953]", functionData => eval(functionData))})
	            .publish()
	            .refCount();
	        tokens.forEach(function (token) {
	            var keyDesc = token.key;
	            var combination, combinations = [];
	            // parse key combinations
	            keyDesc.split(' ').forEach(function (variation) {
	                combination = {
	                    expression: keyDesc,
	                    keys: {}
	                };
	                variation.split('-').forEach(function (value) {
	                    combination.keys[value.trim()] = true;
	                });
	                combinations.push(combination);
	            });
	            _this.wireKey(token.value, obs, combinations, ctx, state, module);
	        });
	        // release closure references to GC 
	        state.cleanup.add(Rx.Disposable.create(function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[298773:299014]", functionData => eval(functionData))}));
	    };
	    KeyPressBinding.prototype.configure = function (options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[299088:299133]", functionData => eval(functionData))};
	    KeyPressBinding.prototype.testCombination = function (combination, event) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[299214:300198]", functionData => eval(functionData))};
	    KeyPressBinding.prototype.testCombinations = function (combinations, event) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[300281:300473]", functionData => eval(functionData))};
	    KeyPressBinding.prototype.wireKey = function (value, obs, combinations, ctx, state, module) {
	        var _this = this;
	        var exp = this.domManager.compileBindingOptions(value, module);
	        var command;
	        var commandParameter = undefined;
	        if (typeof exp === "function") {
	            var handler = this.domManager.evaluateExpression(exp, ctx);
	            handler = Utils_1.unwrapProperty(handler);
	            if (!Command_1.isCommand(handler)) {
	                state.cleanup.add(obs.where(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[301018:301069]", functionData => eval(functionData))}).subscribe(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[301094:301393]", functionData => eval(functionData))}));
	            }
	            else {
	                command = handler;
	                state.cleanup.add(obs.where(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[301526:301577]", functionData => eval(functionData))}).subscribe(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[301602:301896]", functionData => eval(functionData))}));
	            }
	        }
	        else if (typeof exp === "object") {
	            command = this.domManager.evaluateExpression(exp.command, ctx);
	            command = Utils_1.unwrapProperty(command);
	            if (exp.hasOwnProperty("parameter"))
	                commandParameter = this.domManager.evaluateExpression(exp.parameter, ctx);
	            state.cleanup.add(obs.where(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[302300:302351]", functionData => eval(functionData))}).subscribe(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[302376:302645]", functionData => eval(functionData))}));
	        }
	        else {
	            Utils_1.throwError("invalid binding options");
	        }
	    };
	    return KeyPressBinding;
	})();
	exports.default = KeyPressBinding;
	//# sourceMappingURL=KeyPress.js.map

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../node_modules/rx/ts/rx.all.d.ts" />
	/// <reference path="../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	var env = __webpack_require__(17);
	"use strict";
	var TextInputBinding = (function () {
	    function TextInputBinding(domManager, app) {
	        this.priority = 0;
	        this.domManager = domManager;
	        this.app = app;
	    }
	    ////////////////////
	    // wx.IBinding
	    TextInputBinding.prototype.applyBinding = function (node, options, ctx, state, module) {
	        var _this = this;
	        if (node.nodeType !== 1)
	            Utils_1.throwError("textInput-binding only operates on elements!");
	        if (options == null)
	            Utils_1.throwError("invalid binding-options!");
	        var el = node;
	        var tag = el.tagName.toLowerCase();
	        var isTextArea = tag === "textarea";
	        if (tag !== 'input' && tag !== 'textarea')
	            Utils_1.throwError("textInput-binding can only be applied to input or textarea elements");
	        var exp = this.domManager.compileBindingOptions(options, module);
	        var prop;
	        var propertySubscription;
	        var eventSubscription;
	        var previousElementValue;
	        function updateElement(value) {
	            if (value === null || value === undefined) {
	                value = "";
	            }
	            // Update the element only if the element and model are different. On some browsers, updating the value
	            // will move the cursor to the end of the input, which would be bad while the user is typing.
	            if (el.value !== value) {
	                previousElementValue = value; // Make sure we ignore events (propertychange) that result from updating the value
	                el.value = value;
	            }
	        }
	        function doCleanup() {
	            if (propertySubscription) {
	                propertySubscription.dispose();
	                propertySubscription = null;
	            }
	            if (eventSubscription) {
	                eventSubscription.dispose();
	                eventSubscription = null;
	            }
	        }
	        state.cleanup.add(this.domManager.expressionToObservable(exp, ctx).subscribe(function (src) {
	            try {
	                if (!Utils_1.isProperty(src)) {
	                    // initial and final update
	                    updateElement(src);
	                }
	                else {
	                    doCleanup();
	                    // update on property change
	                    prop = src;
	                    propertySubscription = prop.changed.subscribe(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[305598:305665]", functionData => eval(functionData))});
	                    // initial update
	                    updateElement(prop());
	                    // don't attempt to updated computed properties
	                    if (!prop.source) {
	                        // wire change-events depending on browser and version
	                        var events = _this.getTextInputEventObservables(el, isTextArea);
	                        eventSubscription = Rx.Observable.merge(events).subscribe(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[306127:306420]", functionData => eval(functionData))});
	                    }
	                }
	            }
	            catch (e) {
	                _this.app.defaultExceptionHandler.onNext(e);
	            }
	        }));
	        // release closure references to GC 
	        state.cleanup.add(Rx.Disposable.create(function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[306702:306969]", functionData => eval(functionData))}));
	    };
	    TextInputBinding.prototype.configure = function (options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[307044:307089]", functionData => eval(functionData))};
	    TextInputBinding.prototype.getTextInputEventObservables = function (el, isTextArea) {
	        var result = [];
	        if (env.ie && env.ie.version < 10) {
	            if (env.ie.version <= 9) {
	                // wx.Internet Explorer 9 doesn't fire the 'input' event when deleting text, including using
	                // the backspace, delete, or ctrl-x keys, clicking the 'x' to clear the input, dragging text
	                // out of the field, and cutting or deleting text using the context menu. 'selectionchange'
	                // can detect all of those except dragging text out of the field, for which we use 'dragend'.
	                result.push(env.ie.getSelectionChangeObservable(el).where(function (doc) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[307824:307860]", functionData => eval(functionData))}));
	                result.push(Rx.Observable.fromEvent(el, 'dragend'));
	                // wx.IE 9 does support 'input', but since it doesn't fire it when
	                // using autocomplete, we'll use 'propertychange' for it also.
	                result.push(Rx.Observable.fromEvent(el, 'input'));
	                result.push(Rx.Observable.fromEvent(el, 'propertychange').where(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[308260:308298]", functionData => eval(functionData))}));
	            }
	        }
	        else {
	            // All other supported browsers support the 'input' event, which fires whenever the content of the element is changed
	            // through the user interface.
	            result.push(Rx.Observable.fromEvent(el, 'input'));
	            if (env.safari && env.safari.version < 5 && isTextArea) {
	                // Safari <5 doesn't fire the 'input' event for <textarea> elements (it does fire 'textInput'
	                // but only when typing). So we'll just catch as much as we can with keydown, cut, and paste.
	                result.push(Rx.Observable.fromEvent(el, 'keydown'));
	                result.push(Rx.Observable.fromEvent(el, 'paste'));
	                result.push(Rx.Observable.fromEvent(el, 'cut'));
	            }
	            else if (env.opera && env.opera.version < 11) {
	                // Opera 10 doesn't always fire the 'input' event for cut, paste, undo & drop operations.
	                // We can try to catch some of those using 'keydown'.
	                result.push(Rx.Observable.fromEvent(el, 'keydown'));
	            }
	            else if (env.firefox && env.firefox.version < 4.0) {
	                // Firefox <= 3.6 doesn't fire the 'input' event when text is filled in through autocomplete
	                result.push(Rx.Observable.fromEvent(el, 'DOMAutoComplete'));
	                // Firefox <=3.5 doesn't fire the 'input' event when text is dropped into the input.
	                result.push(Rx.Observable.fromEvent(el, 'dragdrop')); // <3.5
	                result.push(Rx.Observable.fromEvent(el, 'drop')); // 3.5
	            }
	        }
	        // Bind to the change event so that we can catch programmatic updates of the value that fire this event.
	        result.push(Rx.Observable.fromEvent(el, 'change'));
	        return result;
	    };
	    return TextInputBinding;
	})();
	exports.default = TextInputBinding;
	//# sourceMappingURL=TextInput.js.map

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../node_modules/rx/ts/rx.all.d.ts" />
	/// <reference path="../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	var Value_1 = __webpack_require__(32);
	var List_1 = __webpack_require__(28);
	"use strict";
	var impls = new Array();
	var RadioSingleSelectionImpl = (function () {
	    function RadioSingleSelectionImpl(domManager) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[310712:310759]", functionData => eval(functionData))}
	    RadioSingleSelectionImpl.prototype.supports = function (el, model) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[310832:310986]", functionData => eval(functionData))};
	    RadioSingleSelectionImpl.prototype.observeElement = function (el) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[311059:311181]", functionData => eval(functionData))};
	    RadioSingleSelectionImpl.prototype.observeModel = function (model) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[311255:311420]", functionData => eval(functionData))};
	    RadioSingleSelectionImpl.prototype.updateElement = function (el, model) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[311499:311636]", functionData => eval(functionData))};
	    RadioSingleSelectionImpl.prototype.updateModel = function (el, model, e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[311716:311856]", functionData => eval(functionData))};
	    return RadioSingleSelectionImpl;
	})();
	var OptionSingleSelectionImpl = (function () {
	    function OptionSingleSelectionImpl(domManager) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[312003:312050]", functionData => eval(functionData))}
	    OptionSingleSelectionImpl.prototype.supports = function (el, model) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[312124:312225]", functionData => eval(functionData))};
	    OptionSingleSelectionImpl.prototype.observeElement = function (el) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[312299:312362]", functionData => eval(functionData))};
	    OptionSingleSelectionImpl.prototype.observeModel = function (model) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[312437:312602]", functionData => eval(functionData))};
	    OptionSingleSelectionImpl.prototype.updateElement = function (el, model) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[312682:313206]", functionData => eval(functionData))};
	    OptionSingleSelectionImpl.prototype.updateModel = function (el, model, e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[313287:313576]", functionData => eval(functionData))};
	    return OptionSingleSelectionImpl;
	})();
	var SelectedValueBinding = (function () {
	    function SelectedValueBinding(domManager, app) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[313719:313946]", functionData => eval(functionData))}
	    ////////////////////
	    // wx.IBinding
	    SelectedValueBinding.prototype.applyBinding = function (node, options, ctx, state, module) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[314089:316836]", functionData => eval(functionData))};
	    SelectedValueBinding.prototype.configure = function (options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[316905:316950]", functionData => eval(functionData))};
	    return SelectedValueBinding;
	})();
	exports.default = SelectedValueBinding;
	//# sourceMappingURL=SelectedValue.js.map

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../node_modules/rx/ts/rx.all.d.ts" />
	/// <reference path="../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	"use strict";
	var ComponentBinding = (function () {
	    function ComponentBinding(domManager, app) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[317399:317542]", functionData => eval(functionData))}
	    ////////////////////
	    // wx.IBinding
	    ComponentBinding.prototype.applyBinding = function (node, options, ctx, state, module) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[317681:321423]", functionData => eval(functionData))};
	    ComponentBinding.prototype.configure = function (options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[321488:321533]", functionData => eval(functionData))};
	    ComponentBinding.prototype.applyTemplate = function (component, el, ctx, state, template, vm) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[321634:322616]", functionData => eval(functionData))};
	    return ComponentBinding;
	})();
	exports.default = ComponentBinding;
	//# sourceMappingURL=Component.js.map

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../../node_modules/rx/ts/rx.all.d.ts" />
	/// <reference path="../../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	"use strict";
	var StateActiveBinding = (function () {
	    function StateActiveBinding(domManager, router, app) {
	        this.priority = 5;
	        this.domManager = domManager;
	        this.router = router;
	        this.app = app;
	    }
	    ////////////////////
	    // wx.IBinding
	    StateActiveBinding.prototype.applyBinding = function (node, options, ctx, state, module) {
	        var _this = this;
	        if (node.nodeType !== 1)
	            Utils_1.throwError("stateActive-binding only operates on elements!");
	        if (options == null)
	            Utils_1.throwError("invalid binding-options!");
	        var el = node;
	        var compiled = this.domManager.compileBindingOptions(options, module);
	        var exp;
	        var observables = [];
	        var opt = compiled;
	        var paramsKeys = [];
	        var stateName;
	        var stateParams;
	        var cssClass = "active";
	        observables.push(this.router.current.changed.startWith(this.router.current()));
	        if (typeof compiled === "function") {
	            exp = compiled;
	            observables.push(this.domManager.expressionToObservable(exp, ctx));
	        }
	        else {
	            // collect state-name observable
	            observables.push(this.domManager.expressionToObservable(opt.name, ctx));
	            // collect params observables
	            if (opt.params) {
	                Object.keys(opt.params).forEach(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[324417:324578]", functionData => eval(functionData))});
	            }
	            if (opt.cssClass) {
	                cssClass = this.domManager.evaluateExpression(opt.cssClass, ctx);
	            }
	        }
	        // subscribe to any input changes
	        state.cleanup.add(Rx.Observable.combineLatest(observables, function (_) { return Utils_1.args2Array(arguments); }).subscribe(function (latest) {
	            try {
	                // first element is the current state
	                var currentState = latest.shift();
	                // second element is the state-name
	                stateName = Utils_1.unwrapProperty(latest.shift());
	                // subsequent entries are latest param values
	                stateParams = {};
	                for (var i = 0; i < paramsKeys.length; i++) {
	                    stateParams[paramsKeys[i]] = Utils_1.unwrapProperty(latest[i]);
	                }
	                var active = _this.router.includes(stateName, stateParams);
	                var classes = cssClass.split(/\s+/).map(function (x) { return x.trim(); }).filter(function (x) { return x; });
	                if (classes.length) {
	                    Utils_1.toggleCssClass.apply(null, [el, active].concat(classes));
	                }
	            }
	            catch (e) {
	                _this.app.defaultExceptionHandler.onNext(e);
	            }
	        }));
	        // release closure references to GC 
	        state.cleanup.add(Rx.Disposable.create(function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[326035:326398]", functionData => eval(functionData))}));
	    };
	    StateActiveBinding.prototype.configure = function (options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[326475:326520]", functionData => eval(functionData))};
	    return StateActiveBinding;
	})();
	exports.default = StateActiveBinding;
	//# sourceMappingURL=StateActive.js.map

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../../node_modules/rx/ts/rx.all.d.ts" />
	/// <reference path="../../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	"use strict";
	var ViewBinding = (function () {
	    function ViewBinding(domManager, router, app) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[326967:327143]", functionData => eval(functionData))}
	    ////////////////////
	    // wx.IBinding
	    ViewBinding.prototype.applyBinding = function (node, options, ctx, state, module) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[327277:329454]", functionData => eval(functionData))};
	    ViewBinding.prototype.configure = function (options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[329514:329559]", functionData => eval(functionData))};
	    ViewBinding.prototype.applyTemplate = function (viewName, componentName, previousComponentName, componentParams, animations, el, ctx, module) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[329708:333287]", functionData => eval(functionData))};
	    return ViewBinding;
	})();
	exports.default = ViewBinding;
	//# sourceMappingURL=View.js.map

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../../node_modules/rx/ts/rx.all.d.ts" />
	/// <reference path="../../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	"use strict";
	var StateRefBinding = (function () {
	    function StateRefBinding(domManager, router, app) {
	        this.priority = 5;
	        this.domManager = domManager;
	        this.router = router;
	        this.app = app;
	    }
	    ////////////////////
	    // wx.IBinding
	    StateRefBinding.prototype.applyBinding = function (node, options, ctx, state, module) {
	        var _this = this;
	        if (node.nodeType !== 1)
	            Utils_1.throwError("stateRef-binding only operates on elements!");
	        if (options == null)
	            Utils_1.throwError("invalid binding-options!");
	        var el = node;
	        var isAnchor = el.tagName.toLowerCase() === "a";
	        var anchor = isAnchor ? el : undefined;
	        var compiled = this.domManager.compileBindingOptions(options, module);
	        var exp;
	        var observables = [];
	        var opt = compiled;
	        var paramsKeys = [];
	        var stateName;
	        var stateParams;
	        if (typeof compiled === "function") {
	            exp = compiled;
	            observables.push(this.domManager.expressionToObservable(exp, ctx));
	        }
	        else {
	            // collect state-name observable
	            observables.push(this.domManager.expressionToObservable(opt.name, ctx));
	            // collect params observables
	            if (opt.params) {
	                Object.keys(opt.params).forEach(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[335045:335206]", functionData => eval(functionData))});
	            }
	        }
	        // subscribe to any input changes
	        state.cleanup.add(Rx.Observable.combineLatest(observables, function (_) { return Utils_1.args2Array(arguments); }).subscribe(function (latest) {
	            try {
	                // first element is always the state-name
	                stateName = Utils_1.unwrapProperty(latest.shift());
	                // subsequent entries are latest param values
	                stateParams = {};
	                for (var i = 0; i < paramsKeys.length; i++) {
	                    stateParams[paramsKeys[i]] = Utils_1.unwrapProperty(latest[i]);
	                }
	                if (anchor != null) {
	                    anchor.href = _this.router.url(stateName, stateParams);
	                }
	            }
	            catch (e) {
	                _this.app.defaultExceptionHandler.onNext(e);
	            }
	        }));
	        // subscribe to anchor's click event
	        state.cleanup.add(Rx.Observable.fromEvent(el, "click").subscribe(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[336243:336429]", functionData => eval(functionData))}));
	        // release closure references to GC 
	        state.cleanup.add(Rx.Disposable.create(function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[336539:336902]", functionData => eval(functionData))}));
	    };
	    StateRefBinding.prototype.configure = function (options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[336976:337021]", functionData => eval(functionData))};
	    return StateRefBinding;
	})();
	exports.default = StateRefBinding;
	//# sourceMappingURL=StateRef.js.map

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	"use strict";
	var templateCache = {};
	var SelectComponent = (function () {
	    function SelectComponent(htmlTemplateEngine) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[337418:337890]", functionData => eval(functionData))}
	    SelectComponent.prototype.buildTemplate = function (params) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[337956:341473]", functionData => eval(functionData))};
	    return SelectComponent;
	})();
	exports.default = SelectComponent;
	//# sourceMappingURL=Select.js.map

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	"use strict";
	var groupId = 0;
	var templateCache = {};
	var RadioGroupComponent = (function () {
	    function RadioGroupComponent(htmlTemplateEngine) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[341894:342565]", functionData => eval(functionData))}
	    RadioGroupComponent.prototype.buildTemplate = function (params) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[342635:345551]", functionData => eval(functionData))};
	    return RadioGroupComponent;
	})();
	exports.default = RadioGroupComponent;
	//# sourceMappingURL=RadioGroup.js.map

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	var Property_1 = __webpack_require__(13);
	var RouteMatcher_1 = __webpack_require__(46);
	"use strict";
	var Router = (function () {
	    function Router(domManager, app) {
	        var _this = this;
	        this.current = Property_1.property();
	        //////////////////////////////////
	        // Implementation
	        this.states = {};
	        this.pathSeparator = ".";
	        this.parentPathDirective = "^";
	        this.rootStateName = "$";
	        this.validPathRegExp = /^[a-zA-Z]([\w-_]*$)/;
	        this.viewTransitionsSubject = new Rx.Subject();
	        this.domManager = domManager;
	        this.app = app;
	        this.viewTransitions = this.viewTransitionsSubject.asObservable();
	        this.reset(false);
	        // monitor navigation history
	        app.history.onPopState.subscribe(function (e) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[346661:347348]", functionData => eval(functionData))});
	        // monitor title changes
	        app.title.changed.subscribe(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[347435:347586]", functionData => eval(functionData))});
	    }
	    //////////////////////////////////
	    // IRouter
	    Router.prototype.state = function (config) {
	        this.registerStateInternal(config);
	        return this;
	    };
	    Router.prototype.updateCurrentStateParams = function (withParamsAction) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[347854:348009]", functionData => eval(functionData))};
	    Router.prototype.go = function (to, params, options) {
	        to = this.mapPath(to);
	        if (this.states[to] == null)
	            Utils_1.throwError("state '{0}' is not registered", to);
	        this.activateState(to, params, options);
	    };
	    Router.prototype.get = function (state) {
	        return this.states[state];
	    };
	    Router.prototype.is = function (state, params, options) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[348421:349146]", functionData => eval(functionData))};
	    Router.prototype.includes = function (state, params, options) {
	        var _current = this.current();
	        var isActive = _current.name.indexOf(state) === 0;
	        params = params || {};
	        if (isActive) {
	            var currentParamsKeys = Object.keys(_current.params);
	            var paramsKeys = Object.keys(params);
	            paramsKeys = paramsKeys.length <= currentParamsKeys.length ?
	                paramsKeys : currentParamsKeys;
	            for (var i = 0; i < paramsKeys.length; i++) {
	                if (_current.params[paramsKeys[i]] != params[paramsKeys[i]]) {
	                    isActive = false;
	                    break;
	                }
	            }
	        }
	        return isActive;
	    };
	    Router.prototype.url = function (state, params) {
	        state = this.mapPath(state);
	        var route = this.getAbsoluteRouteForState(state);
	        if (route != null)
	            return route.stringify(params);
	        return null;
	    };
	    Router.prototype.reset = function (enterRootState) {
	        if (enterRootState === void 0) { enterRootState = true; }
	        this.states = {};
	        // Implicit root state that is always present
	        this.root = this.registerStateInternal({
	            name: this.rootStateName,
	            url: RouteMatcher_1.route("/")
	        });
	        if (enterRootState)
	            this.go(this.rootStateName, {}, { location: 2 /* replace */ });
	    };
	    Router.prototype.sync = function (url) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[350666:351419]", functionData => eval(functionData))};
	    Router.prototype.reload = function () {
	        var state;
	        var params;
	        // reload current state or enter inital root state            
	        if (this.current() != null) {
	            state = this.current().name;
	            params = this.current().params;
	        }
	        else {
	            state = this.rootStateName;
	            params = {};
	        }
	        this.go(state, params, { force: true, location: 2 /* replace */ });
	    };
	    Router.prototype.getViewComponent = function (viewName) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[351956:353295]", functionData => eval(functionData))};
	    Router.prototype.registerStateInternal = function (state) {
	        var _this = this;
	        var parts = state.name.split(this.pathSeparator);
	        if (state.name !== this.rootStateName) {
	            // validate name
	            if (parts.forEach(function (path) {
	                if (!_this.validPathRegExp.test(path)) {
	                    Utils_1.throwError("invalid state-path '{0}' (a state-path must start with a character, optionally followed by one or more alphanumeric characters, dashes or underscores)");
	                }
	            }))
	                ;
	        }
	        // wrap and store
	        state = Utils_1.extend(state, {});
	        this.states[state.name] = state;
	        if (state.url != null) {
	            // create route from string
	            if (typeof state.url === "string") {
	                state.url = RouteMatcher_1.route(state.url);
	            }
	        }
	        else {
	            // derive relative route from name
	            if (state.name !== this.rootStateName)
	                state.url = RouteMatcher_1.route(parts[parts.length - 1]);
	            else
	                state.url = RouteMatcher_1.route("/");
	        }
	        // detect root-state override
	        if (state.name === this.rootStateName)
	            this.root = state;
	        return state;
	    };
	    Router.prototype.pushHistoryState = function (state, title) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[354714:354940]", functionData => eval(functionData))};
	    Router.prototype.replaceHistoryState = function (state, title) {
	        var hs = {
	            stateName: state.name,
	            params: state.params,
	            title: title != null ? title : document.title
	        };
	        this.app.history.replaceState(hs, "", state.url);
	    };
	    Router.prototype.mapPath = function (path) {
	        // child-relative
	        if (path.indexOf(this.pathSeparator) === 0) {
	            return this.current().name + path;
	        }
	        else if (path.indexOf(this.parentPathDirective) === 0) {
	            // parent-relative                
	            var parent_1 = this.current().name;
	            // can't go further up than root
	            if (parent_1 === this.rootStateName)
	                return parent_1;
	            // test parents and siblings until one is found that is registered
	            var parts = parent_1.split(this.pathSeparator);
	            for (var i = parts.length - 1; i > 0; i--) {
	                var tmp = parts.slice(0, i).join(this.pathSeparator);
	                // check if parent or sibling relative to current parent exists 
	                if (this.get(tmp) || this.get(tmp + path.substr(1))) {
	                    path = tmp + path.substr(1);
	                    return path;
	                }
	            }
	            // make it root relative
	            path = this.rootStateName + path.substr(1);
	            return path;
	        }
	        return path;
	    };
	    Router.prototype.getStateHierarchy = function (name) {
	        var parts = name.split(this.pathSeparator);
	        var stateName = "";
	        var result = [];
	        var state;
	        if (name !== this.rootStateName)
	            result.push(this.root);
	        for (var i = 0; i < parts.length; i++) {
	            if (i > 0)
	                stateName += this.pathSeparator + parts[i];
	            else
	                stateName = parts[i];
	            state = this.states[stateName];
	            // if not registered, introduce fake state to keep hierarchy intact
	            if (state == null) {
	                state = {
	                    name: stateName,
	                    url: RouteMatcher_1.route(stateName)
	                };
	            }
	            result.push(state);
	        }
	        return result;
	    };
	    Router.prototype.getAbsoluteRouteForState = function (name, hierarchy) {
	        hierarchy = hierarchy != null ? hierarchy : this.getStateHierarchy(name);
	        var result = null;
	        hierarchy.forEach(function (state) {
	            // concat urls
	            if (result != null) {
	                var route_2 = state.url;
	                // individual states may use absolute urls as well
	                if (!route_2.isAbsolute)
	                    result = result.concat(state.url);
	                else
	                    result = route_2;
	            }
	            else {
	                result = state.url;
	            }
	        });
	        return result;
	    };
	    Router.prototype.activateState = function (to, params, options) {
	        var hierarchy = this.getStateHierarchy(to);
	        var stateViews = {};
	        var stateParams = {};
	        hierarchy.forEach(function (state) {
	            // merge views
	            if (state.views != null) {
	                Utils_1.extend(state.views, stateViews);
	            }
	            // merge params
	            if (state.params != null) {
	                Utils_1.extend(state.params, stateParams);
	            }
	        });
	        // merge param overrides
	        if (params) {
	            Utils_1.extend(params, stateParams);
	        }
	        // construct resulting state
	        var route = this.getAbsoluteRouteForState(to, hierarchy);
	        var state = Utils_1.extend(this.states[to], {});
	        state.url = route.stringify(params);
	        state.views = stateViews;
	        state.params = stateParams;
	        // perform deep equal against current state
	        var _current = this.current();
	        if ((options && options.force) || _current == null ||
	            _current.name !== to ||
	            !Utils_1.isEqual(_current.params, state.params)) {
	            // reset views used by previous state that are unused by new state
	            if (_current != null && _current.views != null && state.views != null) {
	                Object.keys(_current.views).forEach(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[359399:359549]", functionData => eval(functionData))});
	            }
	            // update history
	            if (options && options.location) {
	                if (options.location === 2 /* replace */)
	                    this.replaceHistoryState(state, this.app.title());
	                else
	                    this.pushHistoryState(state, this.app.title());
	            }
	            if (_current != null) {
	                if (_current.onLeave)
	                    _current.onLeave(this.get(_current.name), _current.params);
	            }
	            // activate
	            this.current(state);
	            if (state.onEnter)
	                state.onEnter(this.get(state.name), params);
	        }
	    };
	    Router.prototype.getViewParameterNamesFromStateConfig = function (view, component) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[360315:361701]", functionData => eval(functionData))};
	    return Router;
	})();
	exports.Router = Router;
	//# sourceMappingURL=Router.js.map

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	/*
	 * JavaScript Route Matcher
	 * http://benalman.com/
	 *
	 * Copyright (c) 2011 "Cowboy" Ben Alman
	 * Dual licensed under the MIT and GPL licenses.
	 * http://benalman.com/about/license/
	 */
	"use strict";
	// Characters to be escaped with \. RegExp borrowed from the Backbone router
	// but escaped (note: unnecessarily) to keep JSHint from complaining.
	var reEscape = /[\-\[\]{}()+?.,\\\^$|#\s]/g;
	// Match named :param or *splat placeholders.
	var reParam = /([:*])(\w+)/g;
	var RouteMatcher = (function () {
	    // Pass in a route string (or RegExp) plus an optional map of rules, and get
	    // back an object with .parse and .stringify methods.
	    function RouteMatcher(route, rules) {
	        var _this = this;
	        // store
	        this.route = route;
	        this.rules = rules;
	        // Object to be returned. The public API.
	        // Matched param or splat names, in order
	        this.params = [];
	        // Route matching RegExp.
	        var re = route;
	        // Build route RegExp from passed string.
	        if (typeof route === "string") {
	            // Escape special chars.
	            re = re.replace(reEscape, "\\$&");
	            // Replace any :param or *splat with the appropriate capture group.
	            re = re.replace(reParam, function (_, mode, name) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[363269:363540]", functionData => eval(functionData))});
	            // Add ^/$ anchors and create the actual RegExp.
	            re = new RegExp("^" + re + "$");
	            // Match the passed url against the route, returning an object of params
	            // and values.
	            this.parse = function (url) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[363806:364668]", functionData => eval(functionData))};
	            // Build path by inserting the given params into the route.
	            this.stringify = function (params) {
	                params = params || {};
	                var param, re;
	                var result = route;
	                // Insert each passed param into the route string. Note that this loop
	                // doesn't check .hasOwnProperty because this script doesn't support
	                // modifications to Object.prototype.
	                for (param in params) {
	                    re = new RegExp("[:*]" + param + "\\b");
	                    result = result.replace(re, params[param]);
	                }
	                // Missing params should be replaced with empty string.
	                return result.replace(reParam, "");
	            };
	        }
	        else {
	            // RegExp route was passed. This is super-simple.
	            this.parse = function (url) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[365591:365720]", functionData => eval(functionData))};
	            // There's no meaningful way to stringify based on a RegExp route, so
	            // return empty string.
	            this.stringify = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[365884:365898]", functionData => eval(functionData))};
	        }
	    }
	    RouteMatcher.prototype.stripTrailingSlash = function (route) {
	        if (route.length === 0 || route === "/" || route.lastIndexOf("/") !== route.length - 1)
	            return route;
	        return route.substr(0, route.length - 1);
	    };
	    Object.defineProperty(RouteMatcher.prototype, "isAbsolute", {
	        get: function () {
	            return this.route.indexOf("/") === 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RouteMatcher.prototype.concat = function (route) {
	        var other = route;
	        var a = this.stripTrailingSlash(this.route);
	        var b = this.stripTrailingSlash(other.route);
	        var rules = null;
	        // check for conflicting rules
	        if (other.rules) {
	            if (this.rules) {
	                Object.keys(this.rules).forEach(function (rule) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[366775:366988]", functionData => eval(functionData))});
	                rules = Utils_1.extend(this.rules, Utils_1.extend(other.rules, {}));
	            }
	            else {
	                rules = Utils_1.extend(other.rules, {});
	            }
	        }
	        else if (this.rules) {
	            rules = Utils_1.extend(this.rules, {});
	        }
	        if (a === "/")
	            a = "";
	        return new RouteMatcher(a + "/" + b, rules);
	    };
	    // Test to see if a value matches the corresponding rule.
	    RouteMatcher.prototype.validateRule = function (rule, value) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[367528:368352]", functionData => eval(functionData))};
	    return RouteMatcher;
	})();
	exports.RouteMatcher = RouteMatcher;
	function route(route, rules) {
	    return new RouteMatcher(route, rules);
	}
	exports.route = route;
	//# sourceMappingURL=RouteMatcher.js.map

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../Interfaces.ts" />
	var ScheduledSubject_1 = __webpack_require__(30);
	// ReactiveUI's MessageBus
	"use strict";
	var MessageBus = (function () {
	    function MessageBus() {
	        //////////////////////////////////
	        // Implementation
	        this.messageBus = {};
	        this.schedulerMappings = {};
	    }
	    //////////////////////////////////
	    // IMessageBus
	    MessageBus.prototype.listen = function (contract) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[369106:369178]", functionData => eval(functionData))};
	    MessageBus.prototype.isRegistered = function (contract) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[369241:369307]", functionData => eval(functionData))};
	    MessageBus.prototype.registerMessageSource = function (source, contract) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[369387:369469]", functionData => eval(functionData))};
	    MessageBus.prototype.sendMessage = function (message, contract) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[369540:369613]", functionData => eval(functionData))};
	    MessageBus.prototype.registerScheduler = function (scheduler, contract) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[369692:369755]", functionData => eval(functionData))};
	    MessageBus.prototype.setupSubjectIfNecessary = function (contract) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[369829:370121]", functionData => eval(functionData))};
	    MessageBus.prototype.getScheduler = function (contract) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[370184:370308]", functionData => eval(functionData))};
	    return MessageBus;
	})();
	exports.default = MessageBus;
	//# sourceMappingURL=MessageBus.js.map

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	exports.version = '0.9.87';
	//# sourceMappingURL=Version.js.map

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="./Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	var IID_1 = __webpack_require__(10);
	var ScheduledSubject_1 = __webpack_require__(30);
	var Reflect_1 = __webpack_require__(6);
	var Injector_1 = __webpack_require__(4);
	var res = __webpack_require__(11);
	"use strict";
	var RxObsConstructor = Rx.Observable; // this hack is neccessary because the .d.ts for RxJs declares Observable as an interface)
	/**
	* Creates an read-only observable property with an optional default value from the current (this) observable
	* (Note: This is the equivalent to Knockout's ko.computed)
	* @param {T} initialValue? Optional initial value, valid until the observable produces a value
	*/
	function toProperty(initialValue, scheduler) {
	    scheduler = scheduler || Rx.Scheduler.currentThread;
	    // initialize accessor function (read-only)
	    var accessor = function propertyAccessor(newVal) {
	        if (arguments.length > 0) {
	            Utils_1.throwError("attempt to write to a read-only observable property");
	        }
	        if (accessor.sub == null) {
	            accessor.sub = accessor._source.connect();
	        }
	        return accessor.value;
	    };
	    Reflect_1.Implements(IID_1.default.IObservableProperty)(accessor);
	    Reflect_1.Implements(IID_1.default.IDisposable)(accessor);
	    //////////////////////////////////
	    // IDisposable implementation
	    accessor.dispose = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[372075:372194]", functionData => eval(functionData))};
	    //////////////////////////////////
	    // IObservableProperty<T> implementation
	    accessor.value = initialValue;
	    // setup observables
	    accessor.changedSubject = new Rx.Subject();
	    accessor.changed = accessor.changedSubject
	        .publish()
	        .refCount();
	    accessor.changingSubject = new Rx.Subject();
	    accessor.changing = accessor.changingSubject
	        .publish()
	        .refCount();
	    accessor.source = this;
	    accessor.thrownExceptions = ScheduledSubject_1.createScheduledSubject(scheduler, Injector_1.injector.get(res.app).defaultExceptionHandler);
	    //////////////////////////////////
	    // implementation
	    var firedInitial = false;
	    accessor.sub = this
	        .distinctUntilChanged()
	        .subscribe(function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[372984:373329]", functionData => eval(functionData))}, function (x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[373344:373391]", functionData => eval(functionData))});
	    return accessor;
	}
	RxObsConstructor.prototype.toProperty = toProperty;
	RxObsConstructor.prototype.continueWith = function () {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[373527:373886]", functionData => eval(functionData))};
	RxObsConstructor.startDeferred = function (action) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[373940:374325]", functionData => eval(functionData))};
	function install() {
	    // deliberately left blank    
	}
	exports.install = install;
	//# sourceMappingURL=RxExtensions.js.map

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../Interfaces.ts" />
	var Utils_1 = __webpack_require__(5);
	"use strict";
	function toElementList(element) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[374663:375104]", functionData => eval(functionData))}
	function parseTimingValue(x) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[375135:375437]", functionData => eval(functionData))}
	function getMaximumTransitionDuration(el) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[375481:375788]", functionData => eval(functionData))}
	function getMaximumTransitionDelay(el) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[375829:376146]", functionData => eval(functionData))}
	function getKeyframeAnimationDuration(el) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[376190:376570]", functionData => eval(functionData))}
	function scriptedAnimation(run, prepare, complete) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[376623:377608]", functionData => eval(functionData))}
	function cssTransitionAnimation(prepare, run, complete) {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[377666:382323]", functionData => eval(functionData))}
	function animation() {lacuna_lazy_load("node_modules/webrx/dist/web.rx.js[382346:382608]", functionData => eval(functionData))}
	exports.animation = animation;
	//# sourceMappingURL=Animation.js.map

/***/ }
/******/ ])
});
;
//# sourceMappingURL=web.rx.js.map