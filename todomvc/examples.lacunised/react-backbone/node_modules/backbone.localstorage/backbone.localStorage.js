// LACUNA LAZY LOAD FALLBACK
function lacuna_lazy_load(id, callback){
    fetch("http://127.0.0.1:8125/lazyload/", {
        method: "POST",
        headers: { "Accept": "application/json", "Content-Type": "application/json" },
        body: JSON.stringify({id})
    }).then(response => {
        return response.text();
    }).then(callback);
}
/**
 * Backbone localStorage Adapter
 * Version 1.1.16
 *
 * https://github.com/jeromegn/Backbone.localStorage
 */
(function (root, factory) {
  if (typeof exports === 'object' && typeof require === 'function') {
    module.exports = factory(require("backbone"));
  } else if (typeof define === "function" && define.amd) {
    // AMD. Register as an anonymous module.
    define(["backbone"], function(Backbone) {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[412:527]", functionData => eval(functionData))});
  } else {
    factory(Backbone);
  }
}(this, function(Backbone) {
// A simple module to replace `Backbone.sync` with *localStorage*-based
// persistence. Models are given GUIDS, and saved into a JSON object. Simple
// as that.

// Generate four random hex digits.
function S4() {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[809:881]", functionData => eval(functionData))};

// Generate a pseudo-GUID by concatenating random hexadecimal.
function guid() {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[963:1035]", functionData => eval(functionData))};

function isObject(item) {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[1062:1097]", functionData => eval(functionData))}

function contains(array, item) {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[1130:1223]", functionData => eval(functionData))}

function extend(obj, props) {
  for (var key in props) obj[key] = props[key]
  return obj;
}

function result(object, property) {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[1353:1500]", functionData => eval(functionData))}

// Our Store is represented by a single JS object in *localStorage*. Create it
// with a meaningful name, like the name you'd give a table.
// window.Store is deprectated, use Backbone.LocalStorage instead
Backbone.LocalStorage = window.Store = function(name, serializer) {
  if( !this.localStorage ) {
    throw "Backbone.localStorage: Environment does not support localStorage."
  }
  this.name = name;
  this.serializer = serializer || {
    serialize: function(item) {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[1973:2039]", functionData => eval(functionData))},
    // fix for "illegal access" error on Android when JSON.parse is passed null
    deserialize: function (data) {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[2154:2200]", functionData => eval(functionData))}
  };
  var store = this.localStorage().getItem(this.name);
  this.records = (store && store.split(",")) || [];
};

extend(Backbone.LocalStorage.prototype, {

  // Save the current state of the **Store** to *localStorage*.
  save: function() {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[2442:2515]", functionData => eval(functionData))},

  // Add a model, giving it a (hopefully)-unique GUID, if it doesn't already
  // have an id of it's own.
  create: function(model) {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[2650:2954]", functionData => eval(functionData))},

  // Update a model by replacing its copy in `this.data`.
  update: function(model) {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[3041:3310]", functionData => eval(functionData))},

  // Retrieve a model from `this.data` by id.
  find: function(model) {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[3383:3483]", functionData => eval(functionData))},

  // Return the array of all models currently in storage.
  findAll: function() {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[3566:3841]", functionData => eval(functionData))},

  // Delete a model from `this.data`, returning it.
  destroy: function(model) {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[3923:4210]", functionData => eval(functionData))},

  localStorage: function() {
    return localStorage;
  },

  // Clear localStorage for specific collection.
  _clear: function() {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[4343:4701]", functionData => eval(functionData))},

  // Size of localStorage.
  _storageSize: function() {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[4758:4802]", functionData => eval(functionData))},

  _itemName: function(id) {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[4831:4865]", functionData => eval(functionData))}

});

// localSync delegate to the model or collection's
// *localStorage* property, which should be an instance of `Store`.
// window.Store.sync and Backbone.localSync is deprecated, use Backbone.LocalStorage.sync instead
Backbone.LocalStorage.sync = window.Store.sync = Backbone.localSync = function(method, model, options) {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[5192:6831]", functionData => eval(functionData))};

Backbone.ajaxSync = Backbone.sync;

Backbone.getSyncMethod = function(model, options) {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[6920:7141]", functionData => eval(functionData))};

// Override 'Backbone.sync' to default to localSync,
// the original 'Backbone.sync' is still available in 'Backbone.ajaxSync'
Backbone.sync = function(method, model, options) {lacuna_lazy_load("node_modules/backbone.localstorage/backbone.localStorage.js[7320:7410]", functionData => eval(functionData))};

return Backbone.LocalStorage;
}));
