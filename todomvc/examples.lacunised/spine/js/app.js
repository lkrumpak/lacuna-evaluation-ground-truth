// LACUNA LAZY LOAD FALLBACK
function lacuna_lazy_load(id, callback){
    fetch("http://127.0.0.1:8125/lazyload/", {
        method: "POST",
        headers: { "Accept": "application/json", "Content-Type": "application/json" },
        body: JSON.stringify({id})
    }).then(response => {
        return response.text();
    }).then(callback);
}
// Generated by CoffeeScript 1.10.0
(function() {
  var TodoApp,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TodoApp = (function(superClass) {
    var ENTER_KEY;

    extend(TodoApp, superClass);

    ENTER_KEY = 13;

    TodoApp.prototype.elements = {
      '#new-todo': 'newTodoInput',
      '#toggle-all': 'toggleAllElem',
      '#main': 'main',
      '#todo-list': 'todos',
      '#footer': 'footer',
      '#todo-count': 'count',
      '#filters a': 'filters',
      '#clear-completed': 'clearCompleted'
    };

    TodoApp.prototype.events = {
      'keyup #new-todo': 'new',
      'click #toggle-all': 'toggleAll',
      'click #clear-completed': 'clearCompletedItem'
    };

    function TodoApp() {
      this.renderFooter = bind(this.renderFooter, this);
      this.toggleElems = bind(this.toggleElems, this);
      this.addAll = bind(this.addAll, this);
      this.addNew = bind(this.addNew, this);
      TodoApp.__super__.constructor.apply(this, arguments);
      Todo.bind('create', this.addNew);
      Todo.bind('refresh change', this.addAll);
      Todo.bind('refresh change', this.toggleElems);
      Todo.bind('refresh change', this.renderFooter);
      Todo.fetch();
      this.routes({
        '/:filter': function(param) {lacuna_lazy_load("js/app.js[1607:1920]", functionData => eval(functionData))}
      });
    }

    TodoApp.prototype["new"] = function(e) {lacuna_lazy_load("js/app.js[1981:2195]", functionData => eval(functionData))};

    TodoApp.prototype.getByFilter = function() {
      switch (this.filter) {
        case 'active':
          return Todo.active();
        case 'completed':
          return Todo.completed();
        default:
          return Todo.all();
      }
    };

    TodoApp.prototype.addNew = function(todo) {lacuna_lazy_load("js/app.js[2500:2627]", functionData => eval(functionData))};

    TodoApp.prototype.addAll = function() {
      var i, len, ref, results, todo;
      this.todos.empty();
      ref = this.getByFilter();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        todo = ref[i];
        results.push(this.addNew(todo));
      }
      return results;
    };

    TodoApp.prototype.toggleAll = function(e) {lacuna_lazy_load("js/app.js[2990:3339]", functionData => eval(functionData))};

    TodoApp.prototype.clearCompletedItem = function() {lacuna_lazy_load("js/app.js[3396:3441]", functionData => eval(functionData))};

    TodoApp.prototype.toggleElems = function() {
      var completed, total;
      completed = Todo.completed().length;
      total = Todo.count();
      this.main.toggle(total !== 0);
      this.footer.toggle(total !== 0);
      this.toggleAllElem.prop('checked', completed === total);
      return this.clearCompleted.toggle(completed !== 0);
    };

    TodoApp.prototype.renderFooter = function() {
      var active, completed, text;
      text = function(count) {
        if (count === 1) {
          return 'item';
        } else {
          return 'items';
        }
      };
      active = Todo.active().length;
      completed = Todo.completed().length;
      return this.count.html("<strong>" + active + "</strong> " + (text(active)) + " left");
    };

    return TodoApp;

  })(Spine.Controller);

  $(function() {
    new TodoApp({
      el: $('#todoapp')
    });
    return Spine.Route.setup();
  });

}).call(this);
