/** (github.com/dynamic-deadfunction-detector)
* Instrumentation log function used by the instrumenter
* note that the data object is already stringified.
*/
var logHistory = [];
function instrumentation_log(data) {
    
                function exists(e) { return e.file == jData.file && e.range[0] == jData.range[0] && e.range[1] == jData.range[1]; }
                var jData = JSON.parse(data);
                if (logHistory.some(exists)){ return; }
                logHistory.push(jData);
    fetch("http://127.0.0.1:8004/alivefunction", {
                method: "POST",
                headers: { "Accept": "application/json", "Content-Type": "application/json" },
                body: data
            }).then((response) => { });
}


/**
 * Backbone localStorage Adapter
 * Version 1.1.16
 *
 * https://github.com/jeromegn/Backbone.localStorage
 */
(function (root, factory) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[141,569],"range":[116,569],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":1,"label":"exoskeleton"}');
  if (typeof exports === 'object' && typeof require === 'function') {
    module.exports = factory(require("backbone"));
  } else if (typeof define === "function" && define.amd) {
    // AMD. Register as an anonymous module.
    define(["backbone"], function(Backbone) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[412,527],"range":[393,527],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":0,"label":"exoskeleton"}');
      // Use global variables if the locals are undefined.
      return factory(Backbone || root.Backbone);
    });
  } else {
    factory(Backbone);
  }
}(this, function(Backbone) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[595,7444],"range":[576,7444],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":24,"label":"exoskeleton"}');
// A simple module to replace `Backbone.sync` with *localStorage*-based
// persistence. Models are given GUIDS, and saved into a JSON object. Simple
// as that.

// Generate four random hex digits.
function S4() {instrumentation_log('{"type":"FunctionDeclaration","bodyRange":[809,881],"range":[795,881],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":2,"label":"exoskeleton"}');
   return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
};

// Generate a pseudo-GUID by concatenating random hexadecimal.
function guid() {instrumentation_log('{"type":"FunctionDeclaration","bodyRange":[963,1035],"range":[947,1035],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":3,"label":"exoskeleton"}');
   return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
};

function isObject(item) {instrumentation_log('{"type":"FunctionDeclaration","bodyRange":[1062,1097],"range":[1038,1097],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":4,"label":"exoskeleton"}');
  return item === Object(item);
}

function contains(array, item) {instrumentation_log('{"type":"FunctionDeclaration","bodyRange":[1130,1223],"range":[1099,1223],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":5,"label":"exoskeleton"}');
  var i = array.length;
  while (i--) if (array[i] === item) return true;
  return false;
}

function extend(obj, props) {instrumentation_log('{"type":"FunctionDeclaration","bodyRange":[1253,1317],"range":[1225,1317],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":6,"label":"exoskeleton"}');
  for (var key in props) obj[key] = props[key]
  return obj;
}

function result(object, property) {instrumentation_log('{"type":"FunctionDeclaration","bodyRange":[1353,1500],"range":[1319,1500],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":7,"label":"exoskeleton"}');
    if (object == null) return void 0;
    var value = object[property];
    return (typeof value === 'function') ? object[property]() : value;
}

// Our Store is represented by a single JS object in *localStorage*. Create it
// with a meaningful name, like the name you'd give a table.
// window.Store is deprectated, use Backbone.LocalStorage instead
Backbone.LocalStorage = window.Store = function(name, serializer) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[1774,2313],"range":[1747,2313],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":10,"label":"exoskeleton"}');
  if( !this.localStorage ) {
    throw "Backbone.localStorage: Environment does not support localStorage."
  }
  this.name = name;
  this.serializer = serializer || {
    serialize: function(item) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[1973,2039],"range":[1958,2039],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":8,"label":"exoskeleton"}');
      return isObject(item) ? JSON.stringify(item) : item;
    },
    // fix for "illegal access" error on Android when JSON.parse is passed null
    deserialize: function (data) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[2154,2200],"range":[2138,2200],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":9,"label":"exoskeleton"}');
      return data && JSON.parse(data);
    }
  };
  var store = this.localStorage().getItem(this.name);
  this.records = (store && store.split(",")) || [];
};

extend(Backbone.LocalStorage.prototype, {

  // Save the current state of the **Store** to *localStorage*.
  save: function() {instrumentation_log('{"type":"FunctionExpression","bodyRange":[2442,2515],"range":[2431,2515],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":11,"label":"exoskeleton"}');
    this.localStorage().setItem(this.name, this.records.join(","));
  },

  // Add a model, giving it a (hopefully)-unique GUID, if it doesn't already
  // have an id of it's own.
  create: function(model) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[2650,2954],"range":[2634,2954],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":12,"label":"exoskeleton"}');
    if (!model.id && model.id !== 0) {
      model.id = guid();
      model.set(model.idAttribute, model.id);
    }
    this.localStorage().setItem(this._itemName(model.id), this.serializer.serialize(model));
    this.records.push(model.id.toString());
    this.save();
    return this.find(model);
  },

  // Update a model by replacing its copy in `this.data`.
  update: function(model) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[3041,3310],"range":[3025,3310],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":13,"label":"exoskeleton"}');
    this.localStorage().setItem(this._itemName(model.id), this.serializer.serialize(model));
    var modelId = model.id.toString();
    if (!contains(this.records, modelId)) {
      this.records.push(modelId);
      this.save();
    }
    return this.find(model);
  },

  // Retrieve a model from `this.data` by id.
  find: function(model) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[3383,3483],"range":[3367,3483],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":14,"label":"exoskeleton"}');
    return this.serializer.deserialize(this.localStorage().getItem(this._itemName(model.id)));
  },

  // Return the array of all models currently in storage.
  findAll: function() {instrumentation_log('{"type":"FunctionExpression","bodyRange":[3566,3841],"range":[3555,3841],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":15,"label":"exoskeleton"}');
    var result = [];
    for (var i = 0, id, data; i < this.records.length; i++) {
      id = this.records[i];
      data = this.serializer.deserialize(this.localStorage().getItem(this._itemName(id)));
      if (data != null) result.push(data);
    }
    return result;
  },

  // Delete a model from `this.data`, returning it.
  destroy: function(model) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[3923,4210],"range":[3907,4210],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":16,"label":"exoskeleton"}');
    this.localStorage().removeItem(this._itemName(model.id));
    var modelId = model.id.toString();
    for (var i = 0, id; i < this.records.length; i++) {
      if (this.records[i] === modelId) {
        this.records.splice(i, 1);
      }
    }
    this.save();
    return model;
  },

  localStorage: function() {instrumentation_log('{"type":"FunctionExpression","bodyRange":[4240,4270],"range":[4229,4270],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":17,"label":"exoskeleton"}');
    return localStorage;
  },

  // Clear localStorage for specific collection.
  _clear: function() {instrumentation_log('{"type":"FunctionExpression","bodyRange":[4343,4701],"range":[4332,4701],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":18,"label":"exoskeleton"}');
    var local = this.localStorage(),
      itemRe = new RegExp("^" + this.name + "-");

    // Remove id-tracking item (e.g., "foo").
    local.removeItem(this.name);

    // Match all data items (e.g., "foo-ID") and remove.
    for (var k in local) {
      if (itemRe.test(k)) {
        local.removeItem(k);
      }
    }

    this.records.length = 0;
  },

  // Size of localStorage.
  _storageSize: function() {instrumentation_log('{"type":"FunctionExpression","bodyRange":[4758,4802],"range":[4747,4802],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":19,"label":"exoskeleton"}');
    return this.localStorage().length;
  },

  _itemName: function(id) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[4831,4865],"range":[4818,4865],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":20,"label":"exoskeleton"}');
    return this.name+"-"+id;
  }

});

// localSync delegate to the model or collection's
// *localStorage* property, which should be an instance of `Store`.
// window.Store.sync and Backbone.localSync is deprecated, use Backbone.LocalStorage.sync instead
Backbone.LocalStorage.sync = window.Store.sync = Backbone.localSync = function(method, model, options) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[5192,6831],"range":[5159,6831],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":21,"label":"exoskeleton"}');
  var store = result(model, 'localStorage') || result(model.collection, 'localStorage');

  var resp, errorMessage;
  //If $ is having Deferred - use it.
  var syncDfd = Backbone.$ ?
    (Backbone.$.Deferred && Backbone.$.Deferred()) :
    (Backbone.Deferred && Backbone.Deferred());

  try {

    switch (method) {
      case "read":
        resp = model.id != undefined ? store.find(model) : store.findAll();
        break;
      case "create":
        resp = store.create(model);
        break;
      case "update":
        resp = store.update(model);
        break;
      case "delete":
        resp = store.destroy(model);
        break;
    }

  } catch(error) {
    if (error.code === 22 && store._storageSize() === 0)
      errorMessage = "Private browsing is unsupported";
    else
      errorMessage = error.message;
  }

  if (resp) {
    if (options && options.success) {
      if (Backbone.VERSION === "0.9.10") {
        options.success(model, resp, options);
      } else {
        options.success(resp);
      }
    }
    if (syncDfd) {
      syncDfd.resolve(resp);
    }

  } else {
    errorMessage = errorMessage ? errorMessage
                                : "Record Not Found";

    if (options && options.error)
      if (Backbone.VERSION === "0.9.10") {
        options.error(model, errorMessage, options);
      } else {
        options.error(errorMessage);
      }

    if (syncDfd)
      syncDfd.reject(errorMessage);
  }

  // add compatibility with $.ajax
  // always execute callback for success and error
  if (options && options.complete) options.complete(resp);

  return syncDfd && syncDfd.promise();
};

Backbone.ajaxSync = Backbone.sync;

Backbone.getSyncMethod = function(model, options) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[6920,7141],"range":[6895,7141],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":22,"label":"exoskeleton"}');
  var forceAjaxSync = options && options.ajaxSync;

  if(!forceAjaxSync && (result(model, 'localStorage') || result(model.collection, 'localStorage'))) {
    return Backbone.localSync;
  }

  return Backbone.ajaxSync;
};

// Override 'Backbone.sync' to default to localSync,
// the original 'Backbone.sync' is still available in 'Backbone.ajaxSync'
Backbone.sync = function(method, model, options) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[7320,7410],"range":[7287,7410],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.localstorage/backbone.localStorage.js","index":23,"label":"exoskeleton"}');
  return Backbone.getSyncMethod(model, options).apply(this, [method, model, options]);
};

return Backbone.LocalStorage;
}));
