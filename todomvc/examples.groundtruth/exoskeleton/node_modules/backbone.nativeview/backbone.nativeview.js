/** (github.com/dynamic-deadfunction-detector)
* Instrumentation log function used by the instrumenter
* note that the data object is already stringified.
*/
var logHistory = [];
function instrumentation_log(data) {
    
                function exists(e) { return e.file == jData.file && e.range[0] == jData.range[0] && e.range[1] == jData.range[1]; }
                var jData = JSON.parse(data);
                if (logHistory.some(exists)){ return; }
                logHistory.push(jData);
    fetch("http://127.0.0.1:8004/alivefunction", {
                method: "POST",
                headers: { "Accept": "application/json", "Content-Type": "application/json" },
                body: data
            }).then((response) => { });
}


// Backbone.NativeView.js 0.3.2
// ---------------

//     (c) 2014 Adam Krebs, Jimmy Yuen Ho Wong
//     Backbone.NativeView may be freely distributed under the MIT license.
//     For all details and documentation:
//     https://github.com/akre54/Backbone.NativeView

(function (factory) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[291,483],"range":[272,483],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.nativeview/backbone.nativeview.js","index":0,"label":"exoskeleton"}');
  if (typeof define === 'function' && define.amd) { define(['backbone'], factory);
  } else if (typeof exports === 'object') { factory(require('backbone'));
  } else { factory(Backbone); }
}(function (Backbone) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[504,6147],"range":[484,6147],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.nativeview/backbone.nativeview.js","index":14,"label":"exoskeleton"}');
  // Cached regex to match an opening '<' of an HTML tag, possibly left-padded
  // with whitespace.
  var paddedLt = /^\s*</;

  // Caches a local reference to `Element.prototype` for faster access.
  var ElementProto = (typeof Element !== 'undefined' && Element.prototype) || {};

  // Cross-browser event listener shims
  var elementAddEventListener = ElementProto.addEventListener || function(eventName, listener) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[924,986],"range":[894,986],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.nativeview/backbone.nativeview.js","index":1,"label":"exoskeleton"}');
    return this.attachEvent('on' + eventName, listener);
  }
  var elementRemoveEventListener = ElementProto.removeEventListener || function(eventName, listener) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[1088,1150],"range":[1058,1150],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.nativeview/backbone.nativeview.js","index":2,"label":"exoskeleton"}');
    return this.detachEvent('on' + eventName, listener);
  }

  var indexOf = function(array, item) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[1190,1297],"range":[1168,1297],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.nativeview/backbone.nativeview.js","index":3,"label":"exoskeleton"}');
    for (var i = 0, len = array.length; i < len; i++) if (array[i] === item) return i;
    return -1;
  }

  // Find the right `Element#matches` for IE>=9 and modern browsers.
  var matchesSelector = ElementProto.matches ||
      ElementProto.webkitMatchesSelector ||
      ElementProto.mozMatchesSelector ||
      ElementProto.msMatchesSelector ||
      ElementProto.oMatchesSelector ||
      // Make our own `Element#matches` for IE8
      function(selector) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[1653,2067],"range":[1634,2067],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.nativeview/backbone.nativeview.js","index":4,"label":"exoskeleton"}');
        // Use querySelectorAll to find all elements matching the selector,
        // then check if the given element is included in that list.
        // Executing the query on the parentNode reduces the resulting nodeList,
        // (document doesn't have a parentNode).
        var nodeList = (this.parentNode || document).querySelectorAll(selector) || [];
        return !!~indexOf(nodeList, this);
      };

  // Cache Backbone.View for later access in constructor
  var BBView = Backbone.View;

  // To extend an existing view to use native methods, extend the View prototype
  // with the mixin: _.extend(MyView.prototype, Backbone.NativeViewMixin);
  Backbone.NativeViewMixin = {

    _domEvents: null,

    constructor: function() {instrumentation_log('{"type":"FunctionExpression","bodyRange":[2397,2476],"range":[2386,2476],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.nativeview/backbone.nativeview.js","index":5,"label":"exoskeleton"}');
      this._domEvents = [];
      return BBView.apply(this, arguments);
    },

    $: function(selector) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[2505,2561],"range":[2486,2561],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.nativeview/backbone.nativeview.js","index":6,"label":"exoskeleton"}');
      return this.el.querySelectorAll(selector);
    },

    _removeElement: function() {instrumentation_log('{"type":"FunctionExpression","bodyRange":[2595,2704],"range":[2584,2704],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.nativeview/backbone.nativeview.js","index":7,"label":"exoskeleton"}');
      this.undelegateEvents();
      if (this.el.parentNode) this.el.parentNode.removeChild(this.el);
    },

    // Apply the `element` to the view. `element` can be a CSS selector,
    // a string of HTML, or an Element node.
    _setElement: function(element) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[2860,3194],"range":[2842,3194],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.nativeview/backbone.nativeview.js","index":8,"label":"exoskeleton"}');
      if (typeof element == 'string') {
        if (paddedLt.test(element)) {
          var el = document.createElement('div');
          el.innerHTML = element;
          this.el = el.firstChild;
        } else {
          this.el = document.querySelector(element);
        }
      } else {
        this.el = element;
      }
    },

    // Set a hash of attributes to the view's `el`. We use the "prop" version
    // if available, falling back to `setAttribute` for the catch-all.
    _setAttributes: function(attrs) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[3382,3526],"range":[3366,3526],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.nativeview/backbone.nativeview.js","index":9,"label":"exoskeleton"}');
      for (var attr in attrs) {
        attr in this.el ? this.el[attr] = attrs[attr] : this.el.setAttribute(attr, attrs[attr]);
      }
    },

    // Make a event delegation handler for the given `eventName` and `selector`
    // and attach it to `this.el`.
    // If selector is empty, the listener will be bound to `this.el`. If not, a
    // new handler that will recursively traverse up the event target's DOM
    // hierarchy looking for a node that matches the selector. If one is found,
    // the event's `delegateTarget` property is set to it and the return the
    // result of calling bound `listener` with the parameters given to the
    // handler.
    delegate: function(eventName, selector, listener) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[4102,4759],"range":[4062,4759],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.nativeview/backbone.nativeview.js","index":11,"label":"exoskeleton"}');
      if (typeof selector === 'function') {
        listener = selector;
        selector = null;
      }

      var root = this.el;
      var handler = selector ? function (e) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[4281,4536],"range":[4268,4536],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.nativeview/backbone.nativeview.js","index":10,"label":"exoskeleton"}');
        var node = e.target || e.srcElement;
        for (; node && node != root; node = node.parentNode) {
          if (matchesSelector.call(node, selector)) {
            e.delegateTarget = node;
            listener(e);
          }
        }
      } : listener;

      elementAddEventListener.call(this.el, eventName, handler, false);
      this._domEvents.push({eventName: eventName, handler: handler, listener: listener, selector: selector});
      return handler;
    },

    // Remove a single delegated event. Either `eventName` or `selector` must
    // be included, `selector` and `listener` are optional.
    undelegate: function(eventName, selector, listener) {instrumentation_log('{"type":"FunctionExpression","bodyRange":[4956,5639],"range":[4916,5639],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.nativeview/backbone.nativeview.js","index":12,"label":"exoskeleton"}');
      if (typeof selector === 'function') {
        listener = selector;
        selector = null;
      }

      if (this.el) {
        var handlers = this._domEvents.slice();
        for (var i = 0, len = handlers.length; i < len; i++) {
          var item = handlers[i];

          var match = item.eventName === eventName &&
              (listener ? item.listener === listener : true) &&
              (selector ? item.selector === selector : true);

          if (!match) continue;

          elementRemoveEventListener.call(this.el, item.eventName, item.handler, false);
          this._domEvents.splice(indexOf(handlers, item), 1);
        }
      }
      return this;
    },

    // Remove all events created with `delegate` from `el`
    undelegateEvents: function() {instrumentation_log('{"type":"FunctionExpression","bodyRange":[5734,6036],"range":[5723,6036],"file":"todomvc/examples.lacunized.instrumented/exoskeleton/node_modules/backbone.nativeview/backbone.nativeview.js","index":13,"label":"exoskeleton"}');
      if (this.el) {
        for (var i = 0, len = this._domEvents.length; i < len; i++) {
          var item = this._domEvents[i];
          elementRemoveEventListener.call(this.el, item.eventName, item.handler, false);
        };
        this._domEvents.length = 0;
      }
      return this;
    }
  };

  Backbone.NativeView = Backbone.View.extend(Backbone.NativeViewMixin);

  return Backbone.NativeView;
}));
